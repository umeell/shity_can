
test_can_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b8  080056b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080056b8  080056b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056b8  080056b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080056c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a74  20000074  08005734  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ae8  08005734  00021ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001298e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1a  00000000  00000000  00032a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00035550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00036470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c48  00000000  00000000  00037278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f248  00000000  00000000  00039ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0213  00000000  00000000  00049108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013931b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b8  00000000  00000000  0013936c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005568 	.word	0x08005568

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005568 	.word	0x08005568

080001d0 <HAL_GPIO_EXTI_Callback>:
uint32_t TxMailbox;

int datacheck = 0;
int check = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1) {
 80001da:	88fb      	ldrh	r3, [r7, #6]
 80001dc:	2b02      	cmp	r3, #2
 80001de:	d102      	bne.n	80001e6 <HAL_GPIO_EXTI_Callback+0x16>
		check = 1;
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	601a      	str	r2, [r3, #0]
	}
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000110 	.word	0x20000110

080001f8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000202:	4a09      	ldr	r2, [pc, #36]	; (8000228 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000204:	2100      	movs	r1, #0
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f000 fe6b 	bl	8000ee2 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2) {
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800020e:	691b      	ldr	r3, [r3, #16]
 8000210:	2b02      	cmp	r3, #2
 8000212:	d102      	bne.n	800021a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		datacheck = 1;
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000216:	2201      	movs	r2, #1
 8000218:	601a      	str	r2, [r3, #0]
	}
}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000100 	.word	0x20000100
 8000228:	200000dc 	.word	0x200000dc
 800022c:	2000010c 	.word	0x2000010c

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fae3 	bl	80007fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f854 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f8f6 	bl	800042c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000240:	f000 f8a2 	bl	8000388 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  	TxHeader.DLC = 2;  // data length
 8000244:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <main+0x84>)
 8000246:	2202      	movs	r2, #2
 8000248:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 800024a:	4b1a      	ldr	r3, [pc, #104]	; (80002b4 <main+0x84>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000250:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <main+0x84>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x446;  // ID
 8000256:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <main+0x84>)
 8000258:	f240 4246 	movw	r2, #1094	; 0x446
 800025c:	601a      	str	r2, [r3, #0]

	TxData[0] = 100;   // ms Delay
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <main+0x88>)
 8000260:	2264      	movs	r2, #100	; 0x64
 8000262:	701a      	strb	r2, [r3, #0]
	TxData[1] = 40;    // loop rep
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <main+0x88>)
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	705a      	strb	r2, [r3, #1]

	HAL_CAN_Start(&hcan1);
 800026a:	4814      	ldr	r0, [pc, #80]	; (80002bc <main+0x8c>)
 800026c:	f000 fd25 	bl	8000cba <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000270:	2102      	movs	r1, #2
 8000272:	4812      	ldr	r0, [pc, #72]	; (80002bc <main+0x8c>)
 8000274:	f000 ff47 	bl	8001106 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000278:	f002 fb00 	bl	800287c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800027c:	4a10      	ldr	r2, [pc, #64]	; (80002c0 <main+0x90>)
 800027e:	2100      	movs	r1, #0
 8000280:	4810      	ldr	r0, [pc, #64]	; (80002c4 <main+0x94>)
 8000282:	f002 fb45 	bl	8002910 <osThreadNew>
 8000286:	4603      	mov	r3, r0
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <main+0x98>)
 800028a:	6013      	str	r3, [r2, #0]

  /* creation of Led */
  LedHandle = osThreadNew(StartLed, NULL, &Led_attributes);
 800028c:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <main+0x9c>)
 800028e:	2100      	movs	r1, #0
 8000290:	480f      	ldr	r0, [pc, #60]	; (80002d0 <main+0xa0>)
 8000292:	f002 fb3d 	bl	8002910 <osThreadNew>
 8000296:	4603      	mov	r3, r0
 8000298:	4a0e      	ldr	r2, [pc, #56]	; (80002d4 <main+0xa4>)
 800029a:	6013      	str	r3, [r2, #0]

  /* creation of CAN */
  CANHandle = osThreadNew(StartCAN, NULL, &CAN_attributes);
 800029c:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <main+0xa8>)
 800029e:	2100      	movs	r1, #0
 80002a0:	480e      	ldr	r0, [pc, #56]	; (80002dc <main+0xac>)
 80002a2:	f002 fb35 	bl	8002910 <osThreadNew>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <main+0xb0>)
 80002aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002ac:	f002 fb0a 	bl	80028c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80002b0:	e7fe      	b.n	80002b0 <main+0x80>
 80002b2:	bf00      	nop
 80002b4:	200000c4 	.word	0x200000c4
 80002b8:	200000f8 	.word	0x200000f8
 80002bc:	20000090 	.word	0x20000090
 80002c0:	080055ac 	.word	0x080055ac
 80002c4:	08000535 	.word	0x08000535
 80002c8:	200000b8 	.word	0x200000b8
 80002cc:	080055d0 	.word	0x080055d0
 80002d0:	08000545 	.word	0x08000545
 80002d4:	200000bc 	.word	0x200000bc
 80002d8:	080055f4 	.word	0x080055f4
 80002dc:	080005c9 	.word	0x080005c9
 80002e0:	200000c0 	.word	0x200000c0

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b096      	sub	sp, #88	; 0x58
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	2244      	movs	r2, #68	; 0x44
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f005 f86e 	bl	80053d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000306:	f44f 7000 	mov.w	r0, #512	; 0x200
 800030a:	f001 fc65 	bl	8001bd8 <HAL_PWREx_ControlVoltageScaling>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000314:	f000 f98a 	bl	800062c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000318:	2302      	movs	r3, #2
 800031a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000320:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	2310      	movs	r3, #16
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032a:	2302      	movs	r3, #2
 800032c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800032e:	2302      	movs	r3, #2
 8000330:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000332:	2323      	movs	r3, #35	; 0x23
 8000334:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000336:	2307      	movs	r3, #7
 8000338:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800033e:	2304      	movs	r3, #4
 8000340:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fc9c 	bl	8001c84 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000352:	f000 f96b 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035a:	2303      	movs	r3, #3
 800035c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	2104      	movs	r1, #4
 800036e:	4618      	mov	r0, r3
 8000370:	f002 f864 	bl	800243c <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800037a:	f000 f957 	bl	800062c <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3758      	adds	r7, #88	; 0x58
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800038e:	4b25      	ldr	r3, [pc, #148]	; (8000424 <MX_CAN1_Init+0x9c>)
 8000390:	4a25      	ldr	r2, [pc, #148]	; (8000428 <MX_CAN1_Init+0xa0>)
 8000392:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 28;
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <MX_CAN1_Init+0x9c>)
 8000396:	221c      	movs	r2, #28
 8000398:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800039a:	4b22      	ldr	r3, [pc, #136]	; (8000424 <MX_CAN1_Init+0x9c>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003a0:	4b20      	ldr	r3, [pc, #128]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003ae:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003b4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003b6:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003c2:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003da:	4812      	ldr	r0, [pc, #72]	; (8000424 <MX_CAN1_Init+0x9c>)
 80003dc:	f000 faa8 	bl	8000930 <HAL_CAN_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80003e6:	f000 f921 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
		CAN_FilterTypeDef canfilterconfig;

		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80003ea:	2301      	movs	r3, #1
 80003ec:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 80003ee:	230a      	movs	r3, #10
 80003f0:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x103 << 5;
 80003f6:	f242 0360 	movw	r3, #8288	; 0x2060
 80003fa:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000408:	2300      	movs	r3, #0
 800040a:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800040c:	2301      	movs	r3, #1
 800040e:	61fb      	str	r3, [r7, #28]

		HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000410:	463b      	mov	r3, r7
 8000412:	4619      	mov	r1, r3
 8000414:	4803      	ldr	r0, [pc, #12]	; (8000424 <MX_CAN1_Init+0x9c>)
 8000416:	f000 fb86 	bl	8000b26 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	3728      	adds	r7, #40	; 0x28
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000090 	.word	0x20000090
 8000428:	40006400 	.word	0x40006400

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b39      	ldr	r3, [pc, #228]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	4a38      	ldr	r2, [pc, #224]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044e:	4b36      	ldr	r3, [pc, #216]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	f003 0304 	and.w	r3, r3, #4
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b33      	ldr	r3, [pc, #204]	; (8000528 <MX_GPIO_Init+0xfc>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	4a32      	ldr	r2, [pc, #200]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000466:	4b30      	ldr	r3, [pc, #192]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b2d      	ldr	r3, [pc, #180]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	4a2c      	ldr	r2, [pc, #176]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000478:	f043 0302 	orr.w	r3, r3, #2
 800047c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047e:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	f003 0302 	and.w	r3, r3, #2
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048a:	4b27      	ldr	r3, [pc, #156]	; (8000528 <MX_GPIO_Init+0xfc>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	4a26      	ldr	r2, [pc, #152]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000490:	f043 0310 	orr.w	r3, r3, #16
 8000494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000496:	4b24      	ldr	r3, [pc, #144]	; (8000528 <MX_GPIO_Init+0xfc>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	f003 0310 	and.w	r3, r3, #16
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2104      	movs	r1, #4
 80004a6:	4821      	ldr	r0, [pc, #132]	; (800052c <MX_GPIO_Init+0x100>)
 80004a8:	f001 fb3e 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b2:	481f      	ldr	r0, [pc, #124]	; (8000530 <MX_GPIO_Init+0x104>)
 80004b4:	f001 fb38 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004b8:	2302      	movs	r3, #2
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4619      	mov	r1, r3
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f001 f980 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004d4:	2304      	movs	r3, #4
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004dc:	2301      	movs	r3, #1
 80004de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e0:	2302      	movs	r3, #2
 80004e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4619      	mov	r1, r3
 80004ea:	4810      	ldr	r0, [pc, #64]	; (800052c <MX_GPIO_Init+0x100>)
 80004ec:	f001 f972 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fe:	2302      	movs	r3, #2
 8000500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <MX_GPIO_Init+0x104>)
 800050a:	f001 f963 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2105      	movs	r1, #5
 8000512:	2007      	movs	r0, #7
 8000514:	f001 f927 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000518:	2007      	movs	r0, #7
 800051a:	f001 f940 	bl	800179e <HAL_NVIC_EnableIRQ>

}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	48000400 	.word	0x48000400
 8000530:	48001000 	.word	0x48001000

08000534 <StartDefaultTask>:
	 * @param  argument: Not used
	 * @retval None
	 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
		/* Infinite loop */
		for (;;) {
			osDelay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f002 fa79 	bl	8002a34 <osDelay>
 8000542:	e7fb      	b.n	800053c <StartDefaultTask+0x8>

08000544 <StartLed>:
	 * @param argument: Not used
	 * @retval None
	 */
/* USER CODE END Header_StartLed */
void StartLed(void *argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]



		/* Infinite loop */
		for (;;) {
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <StartLed+0x6c>)
 800054e:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <StartLed+0x70>)
 8000550:	4919      	ldr	r1, [pc, #100]	; (80005b8 <StartLed+0x74>)
 8000552:	481a      	ldr	r0, [pc, #104]	; (80005bc <StartLed+0x78>)
 8000554:	f000 fbf5 	bl	8000d42 <HAL_CAN_AddTxMessage>
			if (check) {
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <StartLed+0x7c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d01e      	beq.n	800059e <StartLed+0x5a>
				for (int i = 0; i < 10; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e018      	b.n	8000598 <StartLed+0x54>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	4815      	ldr	r0, [pc, #84]	; (80005c4 <StartLed+0x80>)
 800056e:	f001 fadb 	bl	8001b28 <HAL_GPIO_WritePin>
					HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <StartLed+0x6c>)
 8000574:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <StartLed+0x70>)
 8000576:	4910      	ldr	r1, [pc, #64]	; (80005b8 <StartLed+0x74>)
 8000578:	4810      	ldr	r0, [pc, #64]	; (80005bc <StartLed+0x78>)
 800057a:	f000 fbe2 	bl	8000d42 <HAL_CAN_AddTxMessage>
					HAL_Delay(500);
 800057e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000582:	f000 f9b1 	bl	80008e8 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <StartLed+0x80>)
 800058e:	f001 facb 	bl	8001b28 <HAL_GPIO_WritePin>
				for (int i = 0; i < 10; i++) {
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	3301      	adds	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b09      	cmp	r3, #9
 800059c:	dde3      	ble.n	8000566 <StartLed+0x22>
				}
			}
			check=0;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <StartLed+0x7c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
			HAL_Delay(1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a8:	f000 f99e 	bl	80008e8 <HAL_Delay>
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80005ac:	e7ce      	b.n	800054c <StartLed+0x8>
 80005ae:	bf00      	nop
 80005b0:	20000108 	.word	0x20000108
 80005b4:	200000f8 	.word	0x200000f8
 80005b8:	200000c4 	.word	0x200000c4
 80005bc:	20000090 	.word	0x20000090
 80005c0:	20000110 	.word	0x20000110
 80005c4:	48001000 	.word	0x48001000

080005c8 <StartCAN>:
	 * @param argument: Not used
	 * @retval None
	 */
/* USER CODE END Header_StartCAN */
void StartCAN(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCAN */


		/* Infinite loop */
		for (;;) {
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80005d0:	2104      	movs	r1, #4
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <StartCAN+0x54>)
 80005d4:	f001 fac0 	bl	8001b58 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005dc:	f000 f984 	bl	80008e8 <HAL_Delay>
			if (datacheck) {
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <StartCAN+0x58>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0f3      	beq.n	80005d0 <StartCAN+0x8>
				// blink the LED
				for (int i = 0; i < RxData[1]; i++) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e00c      	b.n	8000608 <StartCAN+0x40>
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80005ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <StartCAN+0x5c>)
 80005f4:	f001 fab0 	bl	8001b58 <HAL_GPIO_TogglePin>
					HAL_Delay(RxData[0]);
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <StartCAN+0x60>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f973 	bl	80008e8 <HAL_Delay>
				for (int i = 0; i < RxData[1]; i++) {
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3301      	adds	r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <StartCAN+0x60>)
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	461a      	mov	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4293      	cmp	r3, r2
 8000612:	dbec      	blt.n	80005ee <StartCAN+0x26>
			}

			datacheck = 0;
 8000614:	4b02      	ldr	r3, [pc, #8]	; (8000620 <StartCAN+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800061a:	e7d9      	b.n	80005d0 <StartCAN+0x8>
 800061c:	48000400 	.word	0x48000400
 8000620:	2000010c 	.word	0x2000010c
 8000624:	48001000 	.word	0x48001000
 8000628:	20000100 	.word	0x20000100

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <HAL_MspInit+0x4c>)
 8000640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <HAL_MspInit+0x4c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6613      	str	r3, [r2, #96]	; 0x60
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_MspInit+0x4c>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <HAL_MspInit+0x4c>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <HAL_MspInit+0x4c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6593      	str	r3, [r2, #88]	; 0x58
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_MspInit+0x4c>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	210f      	movs	r1, #15
 8000672:	f06f 0001 	mvn.w	r0, #1
 8000676:	f001 f876 	bl	8001766 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <HAL_CAN_MspInit+0x90>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d131      	bne.n	800070e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <HAL_CAN_MspInit+0x94>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ae:	4a1b      	ldr	r2, [pc, #108]	; (800071c <HAL_CAN_MspInit+0x94>)
 80006b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b4:	6593      	str	r3, [r2, #88]	; 0x58
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HAL_CAN_MspInit+0x94>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_CAN_MspInit+0x94>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <HAL_CAN_MspInit+0x94>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <HAL_CAN_MspInit+0x94>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006ec:	2309      	movs	r3, #9
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f001 f86b 	bl	80017d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2105      	movs	r1, #5
 8000702:	2014      	movs	r0, #20
 8000704:	f001 f82f 	bl	8001766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000708:	2014      	movs	r0, #20
 800070a:	f001 f848 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	; 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40006400 	.word	0x40006400
 800071c:	40021000 	.word	0x40021000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f8aa 	bl	80008a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000754:	f003 fda6 	bl	80042a4 <xTaskGetSchedulerState>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d001      	beq.n	8000762 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800075e:	f004 fb8b 	bl	8004e78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}

08000766 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800076a:	2002      	movs	r0, #2
 800076c:	f001 fa0e 	bl	8001b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <CAN1_RX0_IRQHandler+0x10>)
 800077a:	f000 fcea 	bl	8001152 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000090 	.word	0x20000090

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <SystemInit+0x20>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <SystemInit+0x20>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b0:	f7ff ffea 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f004 fdc7 	bl	800536c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007de:	f7ff fd27 	bl	8000230 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007f0:	080056c0 	.word	0x080056c0
  ldr r2, =_sbss
 80007f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007f8:	20001ae8 	.word	0x20001ae8

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>

080007fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000804:	2300      	movs	r3, #0
 8000806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 ffa1 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080e:	200f      	movs	r0, #15
 8000810:	f000 f80e 	bl	8000830 <HAL_InitTick>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	e001      	b.n	8000824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000820:	f7ff ff0a 	bl	8000638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000824:	79fb      	ldrb	r3, [r7, #7]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_InitTick+0x6c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d023      	beq.n	800088c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_InitTick+0x70>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_InitTick+0x6c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	fbb3 f3f1 	udiv	r3, r3, r1
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 ffad 	bl	80017ba <HAL_SYSTICK_Config>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10f      	bne.n	8000886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d809      	bhi.n	8000880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 ff77 	bl	8001766 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_InitTick+0x74>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e007      	b.n	8000890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e004      	b.n	8000890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e001      	b.n	8000890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x20>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_IncTick+0x24>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_IncTick+0x24>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000114 	.word	0x20000114

080008d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_GetTick+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000114 	.word	0x20000114

080008e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f0:	f7ff ffee 	bl	80008d0 <HAL_GetTick>
 80008f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d005      	beq.n	800090e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_Delay+0x44>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090e:	bf00      	nop
 8000910:	f7ff ffde 	bl	80008d0 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	429a      	cmp	r2, r3
 800091e:	d8f7      	bhi.n	8000910 <HAL_Delay+0x28>
  {
  }
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008

08000930 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e0ed      	b.n	8000b1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fe9a 	bl	8000688 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000964:	f7ff ffb4 	bl	80008d0 <HAL_GetTick>
 8000968:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800096a:	e012      	b.n	8000992 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800096c:	f7ff ffb0 	bl	80008d0 <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b0a      	cmp	r3, #10
 8000978:	d90b      	bls.n	8000992 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2205      	movs	r2, #5
 800098a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e0c5      	b.n	8000b1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d0e5      	beq.n	800096c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f022 0202 	bic.w	r2, r2, #2
 80009ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009b0:	f7ff ff8e 	bl	80008d0 <HAL_GetTick>
 80009b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009b6:	e012      	b.n	80009de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009b8:	f7ff ff8a 	bl	80008d0 <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b0a      	cmp	r3, #10
 80009c4:	d90b      	bls.n	80009de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2205      	movs	r2, #5
 80009d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e09f      	b.n	8000b1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1e5      	bne.n	80009b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7e1b      	ldrb	r3, [r3, #24]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d108      	bne.n	8000a06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	e007      	b.n	8000a16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7e5b      	ldrb	r3, [r3, #25]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d108      	bne.n	8000a30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	e007      	b.n	8000a40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7e9b      	ldrb	r3, [r3, #26]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d108      	bne.n	8000a5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f042 0220 	orr.w	r2, r2, #32
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	e007      	b.n	8000a6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 0220 	bic.w	r2, r2, #32
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7edb      	ldrb	r3, [r3, #27]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d108      	bne.n	8000a84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0210 	bic.w	r2, r2, #16
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e007      	b.n	8000a94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0210 	orr.w	r2, r2, #16
 8000a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7f1b      	ldrb	r3, [r3, #28]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d108      	bne.n	8000aae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 0208 	orr.w	r2, r2, #8
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e007      	b.n	8000abe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0208 	bic.w	r2, r2, #8
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7f5b      	ldrb	r3, [r3, #29]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d108      	bne.n	8000ad8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f042 0204 	orr.w	r2, r2, #4
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0204 	bic.w	r2, r2, #4
 8000ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	431a      	orrs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	ea42 0103 	orr.w	r1, r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2201      	movs	r2, #1
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b087      	sub	sp, #28
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b3e:	7cfb      	ldrb	r3, [r7, #19]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d003      	beq.n	8000b4c <HAL_CAN_ConfigFilter+0x26>
 8000b44:	7cfb      	ldrb	r3, [r7, #19]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	f040 80aa 	bne.w	8000ca0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b52:	f043 0201 	orr.w	r2, r3, #1
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f003 031f 	and.w	r3, r3, #31
 8000b64:	2201      	movs	r2, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d123      	bne.n	8000bce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	401a      	ands	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ba8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3248      	adds	r2, #72	; 0x48
 8000bae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bc2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc4:	6979      	ldr	r1, [r7, #20]
 8000bc6:	3348      	adds	r3, #72	; 0x48
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
 8000bcc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d122      	bne.n	8000c1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	431a      	orrs	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bf6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3248      	adds	r2, #72	; 0x48
 8000bfc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c12:	6979      	ldr	r1, [r7, #20]
 8000c14:	3348      	adds	r3, #72	; 0x48
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	440b      	add	r3, r1
 8000c1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c36:	e007      	b.n	8000c48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	431a      	orrs	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c62:	e007      	b.n	8000c74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d107      	bne.n	8000c8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c92:	f023 0201 	bic.w	r2, r3, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e006      	b.n	8000cae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
  }
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d12e      	bne.n	8000d2c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 0201 	bic.w	r2, r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ce6:	f7ff fdf3 	bl	80008d0 <HAL_GetTick>
 8000cea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cec:	e012      	b.n	8000d14 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cee:	f7ff fdef 	bl	80008d0 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b0a      	cmp	r3, #10
 8000cfa:	d90b      	bls.n	8000d14 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2205      	movs	r2, #5
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e012      	b.n	8000d3a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1e5      	bne.n	8000cee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e006      	b.n	8000d3a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
  }
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b089      	sub	sp, #36	; 0x24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d56:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d60:	7ffb      	ldrb	r3, [r7, #31]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d003      	beq.n	8000d6e <HAL_CAN_AddTxMessage+0x2c>
 8000d66:	7ffb      	ldrb	r3, [r7, #31]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	f040 80ad 	bne.w	8000ec8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10a      	bne.n	8000d8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d105      	bne.n	8000d8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 8095 	beq.w	8000eb8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	0e1b      	lsrs	r3, r3, #24
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10d      	bne.n	8000dc6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	6809      	ldr	r1, [r1, #0]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3318      	adds	r3, #24
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	440b      	add	r3, r1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	e00f      	b.n	8000de6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dd0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dd6:	68f9      	ldr	r1, [r7, #12]
 8000dd8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dda:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3318      	adds	r3, #24
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	440b      	add	r3, r1
 8000de4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6819      	ldr	r1, [r3, #0]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3318      	adds	r3, #24
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	440b      	add	r3, r1
 8000df6:	3304      	adds	r3, #4
 8000df8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	7d1b      	ldrb	r3, [r3, #20]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d111      	bne.n	8000e26 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3318      	adds	r3, #24
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3304      	adds	r3, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	6811      	ldr	r1, [r2, #0]
 8000e16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3318      	adds	r3, #24
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	440b      	add	r3, r1
 8000e22:	3304      	adds	r3, #4
 8000e24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3307      	adds	r3, #7
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	061a      	lsls	r2, r3, #24
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3306      	adds	r3, #6
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3305      	adds	r3, #5
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	4313      	orrs	r3, r2
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	3204      	adds	r2, #4
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	4610      	mov	r0, r2
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	6811      	ldr	r1, [r2, #0]
 8000e4e:	ea43 0200 	orr.w	r2, r3, r0
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	440b      	add	r3, r1
 8000e58:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3303      	adds	r3, #3
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	061a      	lsls	r2, r3, #24
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3302      	adds	r3, #2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	041b      	lsls	r3, r3, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	4610      	mov	r0, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	6811      	ldr	r1, [r2, #0]
 8000e84:	ea43 0200 	orr.w	r2, r3, r0
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	440b      	add	r3, r1
 8000e8e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000e92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3318      	adds	r3, #24
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	4413      	add	r3, r2
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	6811      	ldr	r1, [r2, #0]
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3318      	adds	r3, #24
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	440b      	add	r3, r1
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e00e      	b.n	8000ed6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e006      	b.n	8000ed6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
  }
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b087      	sub	sp, #28
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d003      	beq.n	8000f06 <HAL_CAN_GetRxMessage+0x24>
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	f040 80f3 	bne.w	80010ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10e      	bne.n	8000f2a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d116      	bne.n	8000f48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e0e7      	b.n	80010fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d107      	bne.n	8000f48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e0d8      	b.n	80010fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	331b      	adds	r3, #27
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0204 	and.w	r2, r3, #4
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10c      	bne.n	8000f80 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	331b      	adds	r3, #27
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	4413      	add	r3, r2
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0d5b      	lsrs	r3, r3, #21
 8000f76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e00b      	b.n	8000f98 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	331b      	adds	r3, #27
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4413      	add	r3, r2
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	08db      	lsrs	r3, r3, #3
 8000f90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	331b      	adds	r3, #27
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0202 	and.w	r2, r3, #2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	331b      	adds	r3, #27
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4413      	add	r3, r2
 8000fba:	3304      	adds	r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 020f 	and.w	r2, r3, #15
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	331b      	adds	r3, #27
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	331b      	adds	r3, #27
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	4413      	add	r3, r2
 8000fea:	3304      	adds	r3, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4413      	add	r3, r2
 8001000:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	4413      	add	r3, r2
 8001016:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0a1a      	lsrs	r2, r3, #8
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	4413      	add	r3, r2
 8001030:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	0c1a      	lsrs	r2, r3, #16
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	3302      	adds	r3, #2
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	4413      	add	r3, r2
 800104a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	0e1a      	lsrs	r2, r3, #24
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3303      	adds	r3, #3
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4413      	add	r3, r2
 8001064:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3304      	adds	r3, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	4413      	add	r3, r2
 800107c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0a1a      	lsrs	r2, r3, #8
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3305      	adds	r3, #5
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0c1a      	lsrs	r2, r3, #16
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	3306      	adds	r3, #6
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4413      	add	r3, r2
 80010b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0e1a      	lsrs	r2, r3, #24
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3307      	adds	r3, #7
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d108      	bne.n	80010d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0220 	orr.w	r2, r2, #32
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	e007      	b.n	80010e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0220 	orr.w	r2, r2, #32
 80010e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	e006      	b.n	80010fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
  }
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001116:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d002      	beq.n	8001124 <HAL_CAN_ActivateNotification+0x1e>
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d109      	bne.n	8001138 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6959      	ldr	r1, [r3, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	e006      	b.n	8001146 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
  }
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b08a      	sub	sp, #40	; 0x28
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d07c      	beq.n	8001292 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d023      	beq.n	80011ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2201      	movs	r2, #1
 80011a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f983 	bl	80014c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80011ba:	e016      	b.n	80011ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	e00c      	b.n	80011ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
 80011e2:	e002      	b.n	80011ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f989 	bl	80014fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d024      	beq.n	800123e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f963 	bl	80014d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800120e:	e016      	b.n	800123e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
 8001222:	e00c      	b.n	800123e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
 8001236:	e002      	b.n	800123e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f969 	bl	8001510 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d024      	beq.n	8001292 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001250:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f943 	bl	80014e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001262:	e016      	b.n	8001292 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
 8001276:	e00c      	b.n	8001292 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
 800128a:	e002      	b.n	8001292 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f949 	bl	8001524 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00c      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2210      	movs	r2, #16
 80012b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00b      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2208      	movs	r2, #8
 80012d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f930 	bl	8001538 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d009      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7fe ff81 	bl	80001f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00c      	beq.n	800131a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2210      	movs	r2, #16
 8001318:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	f003 0320 	and.w	r3, r3, #32
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00b      	beq.n	800133c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2208      	movs	r2, #8
 8001334:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f912 	bl	8001560 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f8f9 	bl	800154c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00b      	beq.n	800137c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2210      	movs	r2, #16
 8001374:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f8fc 	bl	8001574 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2208      	movs	r2, #8
 8001396:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f8f5 	bl	8001588 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d07b      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d072      	beq.n	8001498 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800140c:	2b00      	cmp	r3, #0
 800140e:	d043      	beq.n	8001498 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001416:	2b00      	cmp	r3, #0
 8001418:	d03e      	beq.n	8001498 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001420:	2b60      	cmp	r3, #96	; 0x60
 8001422:	d02b      	beq.n	800147c <HAL_CAN_IRQHandler+0x32a>
 8001424:	2b60      	cmp	r3, #96	; 0x60
 8001426:	d82e      	bhi.n	8001486 <HAL_CAN_IRQHandler+0x334>
 8001428:	2b50      	cmp	r3, #80	; 0x50
 800142a:	d022      	beq.n	8001472 <HAL_CAN_IRQHandler+0x320>
 800142c:	2b50      	cmp	r3, #80	; 0x50
 800142e:	d82a      	bhi.n	8001486 <HAL_CAN_IRQHandler+0x334>
 8001430:	2b40      	cmp	r3, #64	; 0x40
 8001432:	d019      	beq.n	8001468 <HAL_CAN_IRQHandler+0x316>
 8001434:	2b40      	cmp	r3, #64	; 0x40
 8001436:	d826      	bhi.n	8001486 <HAL_CAN_IRQHandler+0x334>
 8001438:	2b30      	cmp	r3, #48	; 0x30
 800143a:	d010      	beq.n	800145e <HAL_CAN_IRQHandler+0x30c>
 800143c:	2b30      	cmp	r3, #48	; 0x30
 800143e:	d822      	bhi.n	8001486 <HAL_CAN_IRQHandler+0x334>
 8001440:	2b10      	cmp	r3, #16
 8001442:	d002      	beq.n	800144a <HAL_CAN_IRQHandler+0x2f8>
 8001444:	2b20      	cmp	r3, #32
 8001446:	d005      	beq.n	8001454 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001448:	e01d      	b.n	8001486 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001452:	e019      	b.n	8001488 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800145c:	e014      	b.n	8001488 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001466:	e00f      	b.n	8001488 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001470:	e00a      	b.n	8001488 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800147a:	e005      	b.n	8001488 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001484:	e000      	b.n	8001488 <HAL_CAN_IRQHandler+0x336>
            break;
 8001486:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001496:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2204      	movs	r2, #4
 800149e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d008      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f872 	bl	800159c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <__NVIC_EnableIRQ+0x38>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800171c:	d301      	bcc.n	8001722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <SysTick_Config+0x40>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172a:	210f      	movs	r1, #15
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f7ff ff8e 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SysTick_Config+0x40>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <SysTick_Config+0x40>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff29 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff3e 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff8e 	bl	80016a4 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5d 	bl	8001650 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff31 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffa2 	bl	800170c <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e2:	e17f      	b.n	8001ae4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8171 	beq.w	8001ade <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d005      	beq.n	8001814 <HAL_GPIO_Init+0x40>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d130      	bne.n	8001876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800184a:	2201      	movs	r2, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	f003 0201 	and.w	r2, r3, #1
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b03      	cmp	r3, #3
 8001880:	d118      	bne.n	80018b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001888:	2201      	movs	r2, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	f003 0201 	and.w	r2, r3, #1
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d017      	beq.n	80018f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d123      	bne.n	8001944 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	6939      	ldr	r1, [r7, #16]
 8001940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80ac 	beq.w	8001ade <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	4b5f      	ldr	r3, [pc, #380]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198a:	4a5e      	ldr	r2, [pc, #376]	; (8001b04 <HAL_GPIO_Init+0x330>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6613      	str	r3, [r2, #96]	; 0x60
 8001992:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <HAL_GPIO_Init+0x330>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800199e:	4a5a      	ldr	r2, [pc, #360]	; (8001b08 <HAL_GPIO_Init+0x334>)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019c8:	d025      	beq.n	8001a16 <HAL_GPIO_Init+0x242>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4f      	ldr	r2, [pc, #316]	; (8001b0c <HAL_GPIO_Init+0x338>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01f      	beq.n	8001a12 <HAL_GPIO_Init+0x23e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4e      	ldr	r2, [pc, #312]	; (8001b10 <HAL_GPIO_Init+0x33c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0x23a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4d      	ldr	r2, [pc, #308]	; (8001b14 <HAL_GPIO_Init+0x340>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x236>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <HAL_GPIO_Init+0x344>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x232>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <HAL_GPIO_Init+0x348>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x22e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4a      	ldr	r2, [pc, #296]	; (8001b20 <HAL_GPIO_Init+0x34c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x22a>
 80019fa:	2306      	movs	r3, #6
 80019fc:	e00c      	b.n	8001a18 <HAL_GPIO_Init+0x244>
 80019fe:	2307      	movs	r3, #7
 8001a00:	e00a      	b.n	8001a18 <HAL_GPIO_Init+0x244>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e008      	b.n	8001a18 <HAL_GPIO_Init+0x244>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x244>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e004      	b.n	8001a18 <HAL_GPIO_Init+0x244>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x244>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x244>
 8001a16:	2300      	movs	r3, #0
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	4093      	lsls	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a28:	4937      	ldr	r1, [pc, #220]	; (8001b08 <HAL_GPIO_Init+0x334>)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a5a:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a84:	4a27      	ldr	r2, [pc, #156]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <HAL_GPIO_Init+0x350>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f47f ae78 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	48000400 	.word	0x48000400
 8001b10:	48000800 	.word	0x48000800
 8001b14:	48000c00 	.word	0x48000c00
 8001b18:	48001000 	.word	0x48001000
 8001b1c:	48001400 	.word	0x48001400
 8001b20:	48001800 	.word	0x48001800
 8001b24:	40010400 	.word	0x40010400

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43d9      	mvns	r1, r3
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	400b      	ands	r3, r1
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fb10 	bl	80001d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be6:	d130      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf4:	d038      	beq.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2232      	movs	r2, #50	; 0x32
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0c9b      	lsrs	r3, r3, #18
 8001c18:	3301      	adds	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1c:	e002      	b.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	d102      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f2      	bne.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c44:	d110      	bne.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e00f      	b.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d007      	beq.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e3ca      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b97      	ldr	r3, [pc, #604]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca0:	4b94      	ldr	r3, [pc, #592]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80e4 	beq.w	8001e80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_RCC_OscConfig+0x4a>
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	f040 808b 	bne.w	8001ddc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f040 8087 	bne.w	8001ddc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cce:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x62>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e3a2      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <HAL_RCC_OscConfig+0x7c>
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cfe:	e005      	b.n	8001d0c <HAL_RCC_OscConfig+0x88>
 8001d00:	4b7c      	ldr	r3, [pc, #496]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d223      	bcs.n	8001d58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fd1d 	bl	8002754 <RCC_SetFlashLatencyFromMSIRange>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e383      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d24:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a72      	ldr	r2, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	496d      	ldr	r1, [pc, #436]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d42:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	4968      	ldr	r1, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
 8001d56:	e025      	b.n	8001da4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a65      	ldr	r2, [pc, #404]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4960      	ldr	r1, [pc, #384]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	495b      	ldr	r1, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fcdd 	bl	8002754 <RCC_SetFlashLatencyFromMSIRange>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e343      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da4:	f000 fc4a 	bl	800263c <HAL_RCC_GetSysClockFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	4950      	ldr	r1, [pc, #320]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	4a4e      	ldr	r2, [pc, #312]	; (8001efc <HAL_RCC_OscConfig+0x278>)
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dc4:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fd31 	bl	8000830 <HAL_InitTick>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d052      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	e327      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d032      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df0:	f7fe fd6e 	bl	80008d0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001df8:	f7fe fd6a 	bl	80008d0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e310      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e16:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a36      	ldr	r2, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	f043 0308 	orr.w	r3, r3, #8
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4931      	ldr	r1, [pc, #196]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	492c      	ldr	r1, [pc, #176]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	e01a      	b.n	8001e80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e56:	f7fe fd3b 	bl	80008d0 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e5e:	f7fe fd37 	bl	80008d0 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e2dd      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x1da>
 8001e7c:	e000      	b.n	8001e80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d074      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d005      	beq.n	8001e9e <HAL_RCC_OscConfig+0x21a>
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	d10e      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d064      	beq.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d160      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e2ba      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x24a>
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e026      	b.n	8001f1c <HAL_RCC_OscConfig+0x298>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed6:	d115      	bne.n	8001f04 <HAL_RCC_OscConfig+0x280>
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ede:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a02      	ldr	r2, [pc, #8]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e014      	b.n	8001f1c <HAL_RCC_OscConfig+0x298>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08005618 	.word	0x08005618
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004
 8001f04:	4ba0      	ldr	r3, [pc, #640]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a9f      	ldr	r2, [pc, #636]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	4b9d      	ldr	r3, [pc, #628]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a9c      	ldr	r2, [pc, #624]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d013      	beq.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7fe fcd4 	bl	80008d0 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7fe fcd0 	bl	80008d0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e276      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f3e:	4b92      	ldr	r3, [pc, #584]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x2a8>
 8001f4a:	e014      	b.n	8001f76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fcc0 	bl	80008d0 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7fe fcbc 	bl	80008d0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e262      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f66:	4b88      	ldr	r3, [pc, #544]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2d0>
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d060      	beq.n	8002044 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_OscConfig+0x310>
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d119      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d116      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f94:	4b7c      	ldr	r3, [pc, #496]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_OscConfig+0x328>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e23f      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	4973      	ldr	r1, [pc, #460]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc0:	e040      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d023      	beq.n	8002012 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fca:	4b6f      	ldr	r3, [pc, #444]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6e      	ldr	r2, [pc, #440]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fc7b 	bl	80008d0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7fe fc77 	bl	80008d0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e21d      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff0:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b62      	ldr	r3, [pc, #392]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	495f      	ldr	r1, [pc, #380]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	e018      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe fc57 	bl	80008d0 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7fe fc53 	bl	80008d0 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1f9      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d03c      	beq.n	80020ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01c      	beq.n	8002092 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205e:	4a4a      	ldr	r2, [pc, #296]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7fe fc32 	bl	80008d0 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7fe fc2e 	bl	80008d0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1d4      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ef      	beq.n	8002070 <HAL_RCC_OscConfig+0x3ec>
 8002090:	e01b      	b.n	80020ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002098:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7fe fc15 	bl	80008d0 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020aa:	f7fe fc11 	bl	80008d0 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1b7      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020bc:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ef      	bne.n	80020aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80a6 	beq.w	8002224 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d8:	2300      	movs	r3, #0
 80020da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6593      	str	r3, [r2, #88]	; 0x58
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002100:	2301      	movs	r3, #1
 8002102:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_RCC_OscConfig+0x508>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d118      	bne.n	8002142 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCC_OscConfig+0x508>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_RCC_OscConfig+0x508>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211c:	f7fe fbd8 	bl	80008d0 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002124:	f7fe fbd4 	bl	80008d0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e17a      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCC_OscConfig+0x508>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d108      	bne.n	800215c <HAL_RCC_OscConfig+0x4d8>
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800215a:	e029      	b.n	80021b0 <HAL_RCC_OscConfig+0x52c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d115      	bne.n	8002190 <HAL_RCC_OscConfig+0x50c>
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	4a03      	ldr	r2, [pc, #12]	; (8002188 <HAL_RCC_OscConfig+0x504>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002184:	e014      	b.n	80021b0 <HAL_RCC_OscConfig+0x52c>
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	4b9c      	ldr	r3, [pc, #624]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a9b      	ldr	r2, [pc, #620]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a0:	4b98      	ldr	r3, [pc, #608]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	4a97      	ldr	r2, [pc, #604]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d016      	beq.n	80021e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7fe fb8a 	bl	80008d0 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe fb86 	bl	80008d0 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e12a      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ed      	beq.n	80021c0 <HAL_RCC_OscConfig+0x53c>
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7fe fb73 	bl	80008d0 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe fb6f 	bl	80008d0 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e113      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002204:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ed      	bne.n	80021ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002212:	7ffb      	ldrb	r3, [r7, #31]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002218:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a79      	ldr	r2, [pc, #484]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800221e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80fe 	beq.w	800242a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	2b02      	cmp	r3, #2
 8002234:	f040 80d0 	bne.w	80023d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002238:	4b72      	ldr	r3, [pc, #456]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	429a      	cmp	r2, r3
 800224a:	d130      	bne.n	80022ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	3b01      	subs	r3, #1
 8002258:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d127      	bne.n	80022ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d11f      	bne.n	80022ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002278:	2a07      	cmp	r2, #7
 800227a:	bf14      	ite	ne
 800227c:	2201      	movne	r2, #1
 800227e:	2200      	moveq	r2, #0
 8002280:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002282:	4293      	cmp	r3, r2
 8002284:	d113      	bne.n	80022ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	3b01      	subs	r3, #1
 8002294:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d109      	bne.n	80022ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	3b01      	subs	r3, #1
 80022a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d06e      	beq.n	800238c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d069      	beq.n	8002388 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0ad      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80022d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022dc:	f7fe faf8 	bl	80008d0 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe faf4 	bl	80008d0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e09a      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f6:	4b43      	ldr	r3, [pc, #268]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002302:	4b40      	ldr	r3, [pc, #256]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4b40      	ldr	r3, [pc, #256]	; (8002408 <HAL_RCC_OscConfig+0x784>)
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002312:	3a01      	subs	r2, #1
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800231c:	0212      	lsls	r2, r2, #8
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002324:	0852      	lsrs	r2, r2, #1
 8002326:	3a01      	subs	r2, #1
 8002328:	0552      	lsls	r2, r2, #21
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002330:	0852      	lsrs	r2, r2, #1
 8002332:	3a01      	subs	r2, #1
 8002334:	0652      	lsls	r2, r2, #25
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800233c:	0912      	lsrs	r2, r2, #4
 800233e:	0452      	lsls	r2, r2, #17
 8002340:	430a      	orrs	r2, r1
 8002342:	4930      	ldr	r1, [pc, #192]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 8002344:	4313      	orrs	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002348:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a2d      	ldr	r2, [pc, #180]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800234e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002352:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002360:	f7fe fab6 	bl	80008d0 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fab2 	bl	80008d0 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e058      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002386:	e050      	b.n	800242a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e04f      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d148      	bne.n	800242a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a16      	ldr	r2, [pc, #88]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023b0:	f7fe fa8e 	bl	80008d0 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fa8a 	bl	80008d0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e030      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x734>
 80023d6:	e028      	b.n	800242a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d023      	beq.n	8002426 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_RCC_OscConfig+0x780>)
 80023e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fa71 	bl	80008d0 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	e00c      	b.n	800240c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe fa6d 	bl	80008d0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d905      	bls.n	800240c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
 8002404:	40021000 	.word	0x40021000
 8002408:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_OscConfig+0x7b0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ec      	bne.n	80023f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_OscConfig+0x7b0>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4905      	ldr	r1, [pc, #20]	; (8002434 <HAL_RCC_OscConfig+0x7b0>)
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_OscConfig+0x7b4>)
 8002420:	4013      	ands	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
 8002424:	e001      	b.n	800242a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	feeefffc 	.word	0xfeeefffc

0800243c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0e7      	b.n	8002620 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b75      	ldr	r3, [pc, #468]	; (8002628 <HAL_RCC_ClockConfig+0x1ec>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d910      	bls.n	8002480 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_RCC_ClockConfig+0x1ec>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0207 	bic.w	r2, r3, #7
 8002466:	4970      	ldr	r1, [pc, #448]	; (8002628 <HAL_RCC_ClockConfig+0x1ec>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b6e      	ldr	r3, [pc, #440]	; (8002628 <HAL_RCC_ClockConfig+0x1ec>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0cf      	b.n	8002620 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002498:	429a      	cmp	r2, r3
 800249a:	d908      	bls.n	80024ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249c:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4960      	ldr	r1, [pc, #384]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d04c      	beq.n	8002554 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	4b5a      	ldr	r3, [pc, #360]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d121      	bne.n	8002512 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e0a6      	b.n	8002620 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024da:	4b54      	ldr	r3, [pc, #336]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d115      	bne.n	8002512 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e09a      	b.n	8002620 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e08e      	b.n	8002620 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002502:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e086      	b.n	8002620 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4943      	ldr	r1, [pc, #268]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7fe f9d4 	bl	80008d0 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7fe f9d0 	bl	80008d0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e06e      	b.n	8002620 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b3a      	ldr	r3, [pc, #232]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 020c 	and.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1eb      	bne.n	800252c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d010      	beq.n	8002582 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256c:	429a      	cmp	r2, r3
 800256e:	d208      	bcs.n	8002582 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b2e      	ldr	r3, [pc, #184]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	492b      	ldr	r1, [pc, #172]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_RCC_ClockConfig+0x1ec>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d210      	bcs.n	80025b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCC_ClockConfig+0x1ec>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 0207 	bic.w	r2, r3, #7
 8002598:	4923      	ldr	r1, [pc, #140]	; (8002628 <HAL_RCC_ClockConfig+0x1ec>)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCC_ClockConfig+0x1ec>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e036      	b.n	8002620 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4918      	ldr	r1, [pc, #96]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4910      	ldr	r1, [pc, #64]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f0:	f000 f824 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	490b      	ldr	r1, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1f4>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1f8>)
 800260e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1fc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe f90b 	bl	8000830 <HAL_InitTick>
 800261a:	4603      	mov	r3, r0
 800261c:	72fb      	strb	r3, [r7, #11]

  return status;
 800261e:	7afb      	ldrb	r3, [r7, #11]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	08005618 	.word	0x08005618
 8002634:	20000000 	.word	0x20000000
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x34>
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d121      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d11e      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 800267e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	e005      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002698:	4a2b      	ldr	r2, [pc, #172]	; (8002748 <HAL_RCC_GetSysClockFreq+0x10c>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026b4:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_RCC_GetSysClockFreq+0x110>)
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e004      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_RCC_GetSysClockFreq+0x114>)
 80026c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d134      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ca:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d003      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0xac>
 80026e0:	e005      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCC_GetSysClockFreq+0x110>)
 80026e4:	617b      	str	r3, [r7, #20]
      break;
 80026e6:	e005      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ea:	617b      	str	r3, [r7, #20]
      break;
 80026ec:	e002      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	617b      	str	r3, [r7, #20]
      break;
 80026f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	3301      	adds	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	fb03 f202 	mul.w	r2, r3, r2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_RCC_GetSysClockFreq+0x108>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	0e5b      	lsrs	r3, r3, #25
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	3301      	adds	r3, #1
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002734:	69bb      	ldr	r3, [r7, #24]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	08005628 	.word	0x08005628
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200

08002754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800276c:	f7ff fa26 	bl	8001bbc <HAL_PWREx_GetVoltageRange>
 8002770:	6178      	str	r0, [r7, #20]
 8002772:	e014      	b.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	4a24      	ldr	r2, [pc, #144]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277e:	6593      	str	r3, [r2, #88]	; 0x58
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800278c:	f7ff fa16 	bl	8001bbc <HAL_PWREx_GetVoltageRange>
 8002790:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	4a1d      	ldr	r2, [pc, #116]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a4:	d10b      	bne.n	80027be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d919      	bls.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2ba0      	cmp	r3, #160	; 0xa0
 80027b0:	d902      	bls.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027b2:	2302      	movs	r3, #2
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	e013      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027b8:	2301      	movs	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	e010      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d902      	bls.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027c4:	2303      	movs	r3, #3
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e00a      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d102      	bne.n	80027d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d0:	2302      	movs	r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e004      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d101      	bne.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 0207 	bic.w	r2, r3, #7
 80027e8:	4909      	ldr	r1, [pc, #36]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	40022000 	.word	0x40022000

08002814 <__NVIC_SetPriority>:
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	; (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800286c:	2100      	movs	r1, #0
 800286e:	f06f 0004 	mvn.w	r0, #4
 8002872:	f7ff ffcf 	bl	8002814 <__NVIC_SetPriority>
#endif
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002882:	f3ef 8305 	mrs	r3, IPSR
 8002886:	603b      	str	r3, [r7, #0]
  return(result);
 8002888:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800288e:	f06f 0305 	mvn.w	r3, #5
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	e00c      	b.n	80028b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <osKernelInitialize+0x44>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <osKernelInitialize+0x44>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	e002      	b.n	80028b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295
 80028ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028b0:	687b      	ldr	r3, [r7, #4]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000118 	.word	0x20000118

080028c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ca:	f3ef 8305 	mrs	r3, IPSR
 80028ce:	603b      	str	r3, [r7, #0]
  return(result);
 80028d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <osKernelStart+0x1a>
    stat = osErrorISR;
 80028d6:	f06f 0305 	mvn.w	r3, #5
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	e010      	b.n	8002900 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <osKernelStart+0x48>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d109      	bne.n	80028fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028e6:	f7ff ffbf 	bl	8002868 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <osKernelStart+0x48>)
 80028ec:	2202      	movs	r2, #2
 80028ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028f0:	f001 f87c 	bl	80039ec <vTaskStartScheduler>
      stat = osOK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	e002      	b.n	8002900 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002900:	687b      	ldr	r3, [r7, #4]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000118 	.word	0x20000118

08002910 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b08e      	sub	sp, #56	; 0x38
 8002914:	af04      	add	r7, sp, #16
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002920:	f3ef 8305 	mrs	r3, IPSR
 8002924:	617b      	str	r3, [r7, #20]
  return(result);
 8002926:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002928:	2b00      	cmp	r3, #0
 800292a:	d17e      	bne.n	8002a2a <osThreadNew+0x11a>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d07b      	beq.n	8002a2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002936:	2318      	movs	r3, #24
 8002938:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d045      	beq.n	80029d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <osThreadNew+0x48>
        name = attr->name;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <osThreadNew+0x6e>
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b38      	cmp	r3, #56	; 0x38
 8002970:	d805      	bhi.n	800297e <osThreadNew+0x6e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <osThreadNew+0x72>
        return (NULL);
 800297e:	2300      	movs	r3, #0
 8002980:	e054      	b.n	8002a2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00e      	beq.n	80029b8 <osThreadNew+0xa8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2bbb      	cmp	r3, #187	; 0xbb
 80029a0:	d90a      	bls.n	80029b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <osThreadNew+0xa8>
        mem = 1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	e010      	b.n	80029da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10c      	bne.n	80029da <osThreadNew+0xca>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d108      	bne.n	80029da <osThreadNew+0xca>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <osThreadNew+0xca>
          mem = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	e001      	b.n	80029da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d110      	bne.n	8002a02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029e8:	9202      	str	r2, [sp, #8]
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6a3a      	ldr	r2, [r7, #32]
 80029f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fe0c 	bl	8003614 <xTaskCreateStatic>
 80029fc:	4603      	mov	r3, r0
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e013      	b.n	8002a2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d110      	bne.n	8002a2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fe57 	bl	80036ce <xTaskCreate>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d001      	beq.n	8002a2a <osThreadNew+0x11a>
            hTask = NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a2a:	693b      	ldr	r3, [r7, #16]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a3c:	f3ef 8305 	mrs	r3, IPSR
 8002a40:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <osDelay+0x1c>
    stat = osErrorISR;
 8002a48:	f06f 0305 	mvn.w	r3, #5
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e007      	b.n	8002a60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 ff92 	bl	8003984 <vTaskDelay>
    }
  }

  return (stat);
 8002a60:	68fb      	ldr	r3, [r7, #12]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <vApplicationGetIdleTaskMemory+0x30>)
 8002a82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	601a      	str	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	2000011c 	.word	0x2000011c
 8002a9c:	200001d8 	.word	0x200001d8

08002aa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a07      	ldr	r2, [pc, #28]	; (8002acc <vApplicationGetTimerTaskMemory+0x2c>)
 8002ab0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <vApplicationGetTimerTaskMemory+0x30>)
 8002ab6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	200003d8 	.word	0x200003d8
 8002ad0:	20000494 	.word	0x20000494

08002ad4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f103 0208 	add.w	r2, r3, #8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f103 0208 	add.w	r2, r3, #8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f103 0208 	add.w	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d103      	bne.n	8002b96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e00c      	b.n	8002bb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3308      	adds	r3, #8
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e002      	b.n	8002ba4 <vListInsert+0x2e>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d2f6      	bcs.n	8002b9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	601a      	str	r2, [r3, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6892      	ldr	r2, [r2, #8]
 8002bfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6852      	ldr	r2, [r2, #4]
 8002c08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d103      	bne.n	8002c1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c66:	f002 f875 	bl	8004d54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	68f9      	ldr	r1, [r7, #12]
 8002c74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	441a      	add	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	3b01      	subs	r3, #1
 8002c98:	68f9      	ldr	r1, [r7, #12]
 8002c9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d114      	bne.n	8002ce6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01a      	beq.n	8002cfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 f929 	bl	8003f20 <xTaskRemoveFromEventList>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <xQueueGenericReset+0xcc>)
 8002cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	e009      	b.n	8002cfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3310      	adds	r3, #16
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fef2 	bl	8002ad4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3324      	adds	r3, #36	; 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff feed 	bl	8002ad4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cfa:	f002 f85b 	bl	8004db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	e000ed04 	.word	0xe000ed04

08002d0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08e      	sub	sp, #56	; 0x38
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d32:	bf00      	nop
 8002d34:	e7fe      	b.n	8002d34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <xQueueGenericCreateStatic+0x52>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <xQueueGenericCreateStatic+0x56>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericCreateStatic+0x58>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	623b      	str	r3, [r7, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <xQueueGenericCreateStatic+0x7e>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <xQueueGenericCreateStatic+0x82>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueGenericCreateStatic+0x84>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	61fb      	str	r3, [r7, #28]
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002daa:	2350      	movs	r3, #80	; 0x50
 8002dac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b50      	cmp	r3, #80	; 0x50
 8002db2:	d00a      	beq.n	8002dca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	61bb      	str	r3, [r7, #24]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002dca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f805 	bl	8002dfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3730      	adds	r7, #48	; 0x30
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d103      	bne.n	8002e18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e002      	b.n	8002e1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	69b8      	ldr	r0, [r7, #24]
 8002e2e:	f7ff ff05 	bl	8002c3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08e      	sub	sp, #56	; 0x38
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e52:	2300      	movs	r3, #0
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <xQueueGenericSend+0x32>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d103      	bne.n	8002e84 <xQueueGenericSend+0x40>
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <xQueueGenericSend+0x44>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <xQueueGenericSend+0x46>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <xQueueGenericSend+0x60>
	__asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ea0:	bf00      	nop
 8002ea2:	e7fe      	b.n	8002ea2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSend+0x6e>
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <xQueueGenericSend+0x72>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <xQueueGenericSend+0x74>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	623b      	str	r3, [r7, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ed2:	f001 f9e7 	bl	80042a4 <xTaskGetSchedulerState>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <xQueueGenericSend+0x9e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <xQueueGenericSend+0xa2>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <xQueueGenericSend+0xa4>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <xQueueGenericSend+0xbe>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	61fb      	str	r3, [r7, #28]
}
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f02:	f001 ff27 	bl	8004d54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <xQueueGenericSend+0xd4>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d129      	bne.n	8002f6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f1e:	f000 fa0b 	bl	8003338 <prvCopyDataToQueue>
 8002f22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	3324      	adds	r3, #36	; 0x24
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fff5 	bl	8003f20 <xTaskRemoveFromEventList>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <xQueueGenericSend+0x1f8>)
 8002f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	e00a      	b.n	8002f64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f54:	4b39      	ldr	r3, [pc, #228]	; (800303c <xQueueGenericSend+0x1f8>)
 8002f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f64:	f001 ff26 	bl	8004db4 <vPortExitCritical>
				return pdPASS;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e063      	b.n	8003034 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f72:	f001 ff1f 	bl	8004db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e05c      	b.n	8003034 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 f82f 	bl	8003fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f8e:	f001 ff11 	bl	8004db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f92:	f000 fd9b 	bl	8003acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f96:	f001 fedd 	bl	8004d54 <vPortEnterCritical>
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fa0:	b25b      	sxtb	r3, r3
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d103      	bne.n	8002fb0 <xQueueGenericSend+0x16c>
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d103      	bne.n	8002fc6 <xQueueGenericSend+0x182>
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc6:	f001 fef5 	bl	8004db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fca:	1d3a      	adds	r2, r7, #4
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 f81e 	bl	8004014 <xTaskCheckForTimeOut>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d124      	bne.n	8003028 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe0:	f000 faa2 	bl	8003528 <prvIsQueueFull>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d018      	beq.n	800301c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	3310      	adds	r3, #16
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 ff44 	bl	8003e80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ffa:	f000 fa2d 	bl	8003458 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ffe:	f000 fd73 	bl	8003ae8 <xTaskResumeAll>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	f47f af7c 	bne.w	8002f02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <xQueueGenericSend+0x1f8>)
 800300c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	e772      	b.n	8002f02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800301c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800301e:	f000 fa1b 	bl	8003458 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003022:	f000 fd61 	bl	8003ae8 <xTaskResumeAll>
 8003026:	e76c      	b.n	8002f02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800302a:	f000 fa15 	bl	8003458 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800302e:	f000 fd5b 	bl	8003ae8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003032:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003034:	4618      	mov	r0, r3
 8003036:	3738      	adds	r7, #56	; 0x38
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	e000ed04 	.word	0xe000ed04

08003040 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b090      	sub	sp, #64	; 0x40
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <xQueueGenericSendFromISR+0x3c>
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <xQueueGenericSendFromISR+0x40>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <xQueueGenericSendFromISR+0x42>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d103      	bne.n	80030aa <xQueueGenericSendFromISR+0x6a>
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <xQueueGenericSendFromISR+0x6e>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <xQueueGenericSendFromISR+0x70>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	623b      	str	r3, [r7, #32]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030ca:	f001 ff25 	bl	8004f18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030ce:	f3ef 8211 	mrs	r2, BASEPRI
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <xQueueGenericSendFromISR+0xbc>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d12f      	bne.n	800315c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003112:	f000 f911 	bl	8003338 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003116:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d112      	bne.n	8003146 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	3324      	adds	r3, #36	; 0x24
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fef7 	bl	8003f20 <xTaskRemoveFromEventList>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00e      	beq.n	8003156 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e007      	b.n	8003156 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003146:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800314a:	3301      	adds	r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	b25a      	sxtb	r2, r3
 8003150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003156:	2301      	movs	r3, #1
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800315a:	e001      	b.n	8003160 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800315c:	2300      	movs	r3, #0
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003162:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800316a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800316e:	4618      	mov	r0, r3
 8003170:	3740      	adds	r7, #64	; 0x40
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08c      	sub	sp, #48	; 0x30
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <xQueueReceive+0x30>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	623b      	str	r3, [r7, #32]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <xQueueReceive+0x3e>
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <xQueueReceive+0x42>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <xQueueReceive+0x44>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xQueueReceive+0x5e>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	61fb      	str	r3, [r7, #28]
}
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031d6:	f001 f865 	bl	80042a4 <xTaskGetSchedulerState>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <xQueueReceive+0x6e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <xQueueReceive+0x72>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueReceive+0x74>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <xQueueReceive+0x8e>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	61bb      	str	r3, [r7, #24]
}
 8003202:	bf00      	nop
 8003204:	e7fe      	b.n	8003204 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003206:	f001 fda5 	bl	8004d54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01f      	beq.n	8003256 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321a:	f000 f8f7 	bl	800340c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00f      	beq.n	800324e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	3310      	adds	r3, #16
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fe74 	bl	8003f20 <xTaskRemoveFromEventList>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <xQueueReceive+0x1bc>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800324e:	f001 fdb1 	bl	8004db4 <vPortExitCritical>
				return pdPASS;
 8003252:	2301      	movs	r3, #1
 8003254:	e069      	b.n	800332a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d103      	bne.n	8003264 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800325c:	f001 fdaa 	bl	8004db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003260:	2300      	movs	r3, #0
 8003262:	e062      	b.n	800332a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800326a:	f107 0310 	add.w	r3, r7, #16
 800326e:	4618      	mov	r0, r3
 8003270:	f000 feba 	bl	8003fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003274:	2301      	movs	r3, #1
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003278:	f001 fd9c 	bl	8004db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800327c:	f000 fc26 	bl	8003acc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003280:	f001 fd68 	bl	8004d54 <vPortEnterCritical>
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328a:	b25b      	sxtb	r3, r3
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d103      	bne.n	800329a <xQueueReceive+0x122>
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d103      	bne.n	80032b0 <xQueueReceive+0x138>
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b0:	f001 fd80 	bl	8004db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b4:	1d3a      	adds	r2, r7, #4
 80032b6:	f107 0310 	add.w	r3, r7, #16
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fea9 	bl	8004014 <xTaskCheckForTimeOut>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d123      	bne.n	8003310 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ca:	f000 f917 	bl	80034fc <prvIsQueueEmpty>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d017      	beq.n	8003304 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	3324      	adds	r3, #36	; 0x24
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fdcf 	bl	8003e80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e4:	f000 f8b8 	bl	8003458 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032e8:	f000 fbfe 	bl	8003ae8 <xTaskResumeAll>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d189      	bne.n	8003206 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <xQueueReceive+0x1bc>)
 80032f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	e780      	b.n	8003206 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003306:	f000 f8a7 	bl	8003458 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800330a:	f000 fbed 	bl	8003ae8 <xTaskResumeAll>
 800330e:	e77a      	b.n	8003206 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003312:	f000 f8a1 	bl	8003458 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003316:	f000 fbe7 	bl	8003ae8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800331a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800331c:	f000 f8ee 	bl	80034fc <prvIsQueueEmpty>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	f43f af6f 	beq.w	8003206 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003328:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800332a:	4618      	mov	r0, r3
 800332c:	3730      	adds	r7, #48	; 0x30
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10d      	bne.n	8003372 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d14d      	bne.n	80033fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 ffbc 	bl	80042e0 <xTaskPriorityDisinherit>
 8003368:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	e043      	b.n	80033fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d119      	bne.n	80033ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6858      	ldr	r0, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	461a      	mov	r2, r3
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	f002 f818 	bl	80053b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	441a      	add	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d32b      	bcc.n	80033fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	e026      	b.n	80033fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68d8      	ldr	r0, [r3, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	461a      	mov	r2, r3
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	f001 fffe 	bl	80053b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	425b      	negs	r3, r3
 80033c6:	441a      	add	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d207      	bcs.n	80033e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	425b      	negs	r3, r3
 80033e2:	441a      	add	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d105      	bne.n	80033fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003402:	697b      	ldr	r3, [r7, #20]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	441a      	add	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	429a      	cmp	r2, r3
 8003436:	d303      	bcc.n	8003440 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68d9      	ldr	r1, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	461a      	mov	r2, r3
 800344a:	6838      	ldr	r0, [r7, #0]
 800344c:	f001 ffb4 	bl	80053b8 <memcpy>
	}
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003460:	f001 fc78 	bl	8004d54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800346a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800346c:	e011      	b.n	8003492 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d012      	beq.n	800349c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3324      	adds	r3, #36	; 0x24
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fd50 	bl	8003f20 <xTaskRemoveFromEventList>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003486:	f000 fe27 	bl	80040d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	3b01      	subs	r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	dce9      	bgt.n	800346e <prvUnlockQueue+0x16>
 800349a:	e000      	b.n	800349e <prvUnlockQueue+0x46>
					break;
 800349c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034a6:	f001 fc85 	bl	8004db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034aa:	f001 fc53 	bl	8004d54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034b6:	e011      	b.n	80034dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3310      	adds	r3, #16
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fd2b 	bl	8003f20 <xTaskRemoveFromEventList>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034d0:	f000 fe02 	bl	80040d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034d4:	7bbb      	ldrb	r3, [r7, #14]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	dce9      	bgt.n	80034b8 <prvUnlockQueue+0x60>
 80034e4:	e000      	b.n	80034e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034f0:	f001 fc60 	bl	8004db4 <vPortExitCritical>
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003504:	f001 fc26 	bl	8004d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e001      	b.n	800351a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800351a:	f001 fc4b 	bl	8004db4 <vPortExitCritical>

	return xReturn;
 800351e:	68fb      	ldr	r3, [r7, #12]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003530:	f001 fc10 	bl	8004d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	429a      	cmp	r2, r3
 800353e:	d102      	bne.n	8003546 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003540:	2301      	movs	r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e001      	b.n	800354a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800354a:	f001 fc33 	bl	8004db4 <vPortExitCritical>

	return xReturn;
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e014      	b.n	8003592 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003568:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <vQueueAddToRegistry+0x50>)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <vQueueAddToRegistry+0x50>)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <vQueueAddToRegistry+0x50>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800358a:	e006      	b.n	800359a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b07      	cmp	r3, #7
 8003596:	d9e7      	bls.n	8003568 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000894 	.word	0x20000894

080035ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035bc:	f001 fbca 	bl	8004d54 <vPortEnterCritical>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035c6:	b25b      	sxtb	r3, r3
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d103      	bne.n	80035d6 <vQueueWaitForMessageRestricted+0x2a>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d103      	bne.n	80035ec <vQueueWaitForMessageRestricted+0x40>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ec:	f001 fbe2 	bl	8004db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3324      	adds	r3, #36	; 0x24
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fc61 	bl	8003ec8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7ff ff26 	bl	8003458 <prvUnlockQueue>
	}
 800360c:	bf00      	nop
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af04      	add	r7, sp, #16
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	623b      	str	r3, [r7, #32]
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xTaskCreateStatic+0x46>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	61fb      	str	r3, [r7, #28]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800365a:	23bc      	movs	r3, #188	; 0xbc
 800365c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2bbc      	cmp	r3, #188	; 0xbc
 8003662:	d00a      	beq.n	800367a <xTaskCreateStatic+0x66>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	61bb      	str	r3, [r7, #24]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800367a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01e      	beq.n	80036c0 <xTaskCreateStatic+0xac>
 8003682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003690:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2202      	movs	r2, #2
 8003696:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800369a:	2300      	movs	r3, #0
 800369c:	9303      	str	r3, [sp, #12]
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	9302      	str	r3, [sp, #8]
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f850 	bl	8003758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ba:	f000 f8f3 	bl	80038a4 <prvAddNewTaskToReadyList>
 80036be:	e001      	b.n	80036c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036c4:	697b      	ldr	r3, [r7, #20]
	}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b08c      	sub	sp, #48	; 0x30
 80036d2:	af04      	add	r7, sp, #16
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fc58 	bl	8004f98 <pvPortMalloc>
 80036e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036f0:	20bc      	movs	r0, #188	; 0xbc
 80036f2:	f001 fc51 	bl	8004f98 <pvPortMalloc>
 80036f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
 8003704:	e005      	b.n	8003712 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f001 fd12 	bl	8005130 <vPortFree>
 800370c:	e001      	b.n	8003712 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d017      	beq.n	8003748 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	2300      	movs	r3, #0
 8003724:	9303      	str	r3, [sp, #12]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	9302      	str	r3, [sp, #8]
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f80e 	bl	8003758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800373c:	69f8      	ldr	r0, [r7, #28]
 800373e:	f000 f8b1 	bl	80038a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003742:	2301      	movs	r3, #1
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e002      	b.n	800374e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003748:	f04f 33ff 	mov.w	r3, #4294967295
 800374c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800374e:	69bb      	ldr	r3, [r7, #24]
	}
 8003750:	4618      	mov	r0, r3
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	461a      	mov	r2, r3
 8003770:	21a5      	movs	r1, #165	; 0xa5
 8003772:	f001 fe2f 	bl	80053d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003780:	3b01      	subs	r3, #1
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	617b      	str	r3, [r7, #20]
}
 80037ac:	bf00      	nop
 80037ae:	e7fe      	b.n	80037ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01f      	beq.n	80037f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e012      	b.n	80037e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	7819      	ldrb	r1, [r3, #0]
 80037c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	3334      	adds	r3, #52	; 0x34
 80037cc:	460a      	mov	r2, r1
 80037ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d006      	beq.n	80037ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	3301      	adds	r3, #1
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2b0f      	cmp	r3, #15
 80037e6:	d9e9      	bls.n	80037bc <prvInitialiseNewTask+0x64>
 80037e8:	e000      	b.n	80037ec <prvInitialiseNewTask+0x94>
			{
				break;
 80037ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f4:	e003      	b.n	80037fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	2b37      	cmp	r3, #55	; 0x37
 8003802:	d901      	bls.n	8003808 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003804:	2337      	movs	r3, #55	; 0x37
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003812:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	2200      	movs	r2, #0
 8003818:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	3304      	adds	r3, #4
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff f978 	bl	8002b14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	3318      	adds	r3, #24
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff f973 	bl	8002b14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003832:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	2200      	movs	r2, #0
 8003848:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	2200      	movs	r2, #0
 8003850:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	3354      	adds	r3, #84	; 0x54
 8003858:	2260      	movs	r2, #96	; 0x60
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fdb9 	bl	80053d4 <memset>
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <prvInitialiseNewTask+0x140>)
 8003866:	659a      	str	r2, [r3, #88]	; 0x58
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <prvInitialiseNewTask+0x144>)
 800386c:	65da      	str	r2, [r3, #92]	; 0x5c
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <prvInitialiseNewTask+0x148>)
 8003872:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	69b8      	ldr	r0, [r7, #24]
 800387a:	f001 f941 	bl	8004b00 <pxPortInitialiseStack>
 800387e:	4602      	mov	r2, r0
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003890:	bf00      	nop
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	08005678 	.word	0x08005678
 800389c:	08005698 	.word	0x08005698
 80038a0:	08005658 	.word	0x08005658

080038a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038ac:	f001 fa52 	bl	8004d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038b0:	4b2d      	ldr	r3, [pc, #180]	; (8003968 <prvAddNewTaskToReadyList+0xc4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <prvAddNewTaskToReadyList+0xc4>)
 80038b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038ba:	4b2c      	ldr	r3, [pc, #176]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038c2:	4a2a      	ldr	r2, [pc, #168]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <prvAddNewTaskToReadyList+0xc4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d110      	bne.n	80038f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038d0:	f000 fc26 	bl	8004120 <prvInitialiseTaskLists>
 80038d4:	e00d      	b.n	80038f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <prvAddNewTaskToReadyList+0xcc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d802      	bhi.n	80038f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <prvAddNewTaskToReadyList+0xd0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <prvAddNewTaskToReadyList+0xd0>)
 80038fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <prvAddNewTaskToReadyList+0xd0>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <prvAddNewTaskToReadyList+0xd4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d903      	bls.n	8003918 <prvAddNewTaskToReadyList+0x74>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <prvAddNewTaskToReadyList+0xd4>)
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <prvAddNewTaskToReadyList+0xd8>)
 8003926:	441a      	add	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f7ff f8fd 	bl	8002b2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003934:	f001 fa3e 	bl	8004db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <prvAddNewTaskToReadyList+0xcc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00e      	beq.n	800395e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <prvAddNewTaskToReadyList+0xc8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	429a      	cmp	r2, r3
 800394c:	d207      	bcs.n	800395e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <prvAddNewTaskToReadyList+0xdc>)
 8003950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000da8 	.word	0x20000da8
 800396c:	200008d4 	.word	0x200008d4
 8003970:	20000db4 	.word	0x20000db4
 8003974:	20000dc4 	.word	0x20000dc4
 8003978:	20000db0 	.word	0x20000db0
 800397c:	200008d8 	.word	0x200008d8
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <vTaskDelay+0x60>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <vTaskDelay+0x30>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	60bb      	str	r3, [r7, #8]
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039b4:	f000 f88a 	bl	8003acc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039b8:	2100      	movs	r1, #0
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fcfe 	bl	80043bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039c0:	f000 f892 	bl	8003ae8 <xTaskResumeAll>
 80039c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <vTaskDelay+0x64>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000dd0 	.word	0x20000dd0
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039fa:	463a      	mov	r2, r7
 80039fc:	1d39      	adds	r1, r7, #4
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f832 	bl	8002a6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	9202      	str	r2, [sp, #8]
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	2300      	movs	r3, #0
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2300      	movs	r3, #0
 8003a18:	460a      	mov	r2, r1
 8003a1a:	4924      	ldr	r1, [pc, #144]	; (8003aac <vTaskStartScheduler+0xc0>)
 8003a1c:	4824      	ldr	r0, [pc, #144]	; (8003ab0 <vTaskStartScheduler+0xc4>)
 8003a1e:	f7ff fdf9 	bl	8003614 <xTaskCreateStatic>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <vTaskStartScheduler+0xc8>)
 8003a26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <vTaskStartScheduler+0xc8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a30:	2301      	movs	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e001      	b.n	8003a3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a40:	f000 fd10 	bl	8004464 <xTimerCreateTimerTask>
 8003a44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d11b      	bne.n	8003a84 <vTaskStartScheduler+0x98>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	613b      	str	r3, [r7, #16]
}
 8003a5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <vTaskStartScheduler+0xcc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3354      	adds	r3, #84	; 0x54
 8003a66:	4a15      	ldr	r2, [pc, #84]	; (8003abc <vTaskStartScheduler+0xd0>)
 8003a68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <vTaskStartScheduler+0xd4>)
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <vTaskStartScheduler+0xd8>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a78:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <vTaskStartScheduler+0xdc>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a7e:	f001 f8c7 	bl	8004c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a82:	e00e      	b.n	8003aa2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d10a      	bne.n	8003aa2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60fb      	str	r3, [r7, #12]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <vTaskStartScheduler+0xb4>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	08005594 	.word	0x08005594
 8003ab0:	080040f1 	.word	0x080040f1
 8003ab4:	20000dcc 	.word	0x20000dcc
 8003ab8:	200008d4 	.word	0x200008d4
 8003abc:	20000010 	.word	0x20000010
 8003ac0:	20000dc8 	.word	0x20000dc8
 8003ac4:	20000db4 	.word	0x20000db4
 8003ac8:	20000dac 	.word	0x20000dac

08003acc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <vTaskSuspendAll+0x18>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	4a03      	ldr	r2, [pc, #12]	; (8003ae4 <vTaskSuspendAll+0x18>)
 8003ad8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	20000dd0 	.word	0x20000dd0

08003ae8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003af6:	4b42      	ldr	r3, [pc, #264]	; (8003c00 <xTaskResumeAll+0x118>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <xTaskResumeAll+0x2c>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	603b      	str	r3, [r7, #0]
}
 8003b10:	bf00      	nop
 8003b12:	e7fe      	b.n	8003b12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b14:	f001 f91e 	bl	8004d54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <xTaskResumeAll+0x118>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	4a38      	ldr	r2, [pc, #224]	; (8003c00 <xTaskResumeAll+0x118>)
 8003b20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b22:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <xTaskResumeAll+0x118>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d162      	bne.n	8003bf0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <xTaskResumeAll+0x11c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d05e      	beq.n	8003bf0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b32:	e02f      	b.n	8003b94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b34:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <xTaskResumeAll+0x120>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3318      	adds	r3, #24
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff f851 	bl	8002be8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff f84c 	bl	8002be8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b2d      	ldr	r3, [pc, #180]	; (8003c0c <xTaskResumeAll+0x124>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d903      	bls.n	8003b64 <xTaskResumeAll+0x7c>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <xTaskResumeAll+0x124>)
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <xTaskResumeAll+0x128>)
 8003b72:	441a      	add	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7fe ffd7 	bl	8002b2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <xTaskResumeAll+0x12c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <xTaskResumeAll+0x130>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <xTaskResumeAll+0x120>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1cb      	bne.n	8003b34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ba2:	f000 fb5f 	bl	8004264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <xTaskResumeAll+0x134>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d010      	beq.n	8003bd4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bb2:	f000 f847 	bl	8003c44 <xTaskIncrementTick>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bbc:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <xTaskResumeAll+0x130>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f1      	bne.n	8003bb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <xTaskResumeAll+0x134>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <xTaskResumeAll+0x130>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <xTaskResumeAll+0x138>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bf0:	f001 f8e0 	bl	8004db4 <vPortExitCritical>

	return xAlreadyYielded;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000dd0 	.word	0x20000dd0
 8003c04:	20000da8 	.word	0x20000da8
 8003c08:	20000d68 	.word	0x20000d68
 8003c0c:	20000db0 	.word	0x20000db0
 8003c10:	200008d8 	.word	0x200008d8
 8003c14:	200008d4 	.word	0x200008d4
 8003c18:	20000dbc 	.word	0x20000dbc
 8003c1c:	20000db8 	.word	0x20000db8
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <xTaskGetTickCount+0x1c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c30:	687b      	ldr	r3, [r7, #4]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000dac 	.word	0x20000dac

08003c44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c4e:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <xTaskIncrementTick+0x148>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 808f 	bne.w	8003d76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c58:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <xTaskIncrementTick+0x14c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c60:	4a4b      	ldr	r2, [pc, #300]	; (8003d90 <xTaskIncrementTick+0x14c>)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d120      	bne.n	8003cae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c6c:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <xTaskIncrementTick+0x150>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <xTaskIncrementTick+0x48>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	603b      	str	r3, [r7, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <xTaskIncrementTick+0x46>
 8003c8c:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <xTaskIncrementTick+0x150>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <xTaskIncrementTick+0x154>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <xTaskIncrementTick+0x150>)
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4a3f      	ldr	r2, [pc, #252]	; (8003d98 <xTaskIncrementTick+0x154>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b3e      	ldr	r3, [pc, #248]	; (8003d9c <xTaskIncrementTick+0x158>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a3d      	ldr	r2, [pc, #244]	; (8003d9c <xTaskIncrementTick+0x158>)
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	f000 fadb 	bl	8004264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cae:	4b3c      	ldr	r3, [pc, #240]	; (8003da0 <xTaskIncrementTick+0x15c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d349      	bcc.n	8003d4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <xTaskIncrementTick+0x150>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc2:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <xTaskIncrementTick+0x15c>)
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	601a      	str	r2, [r3, #0]
					break;
 8003cca:	e03f      	b.n	8003d4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <xTaskIncrementTick+0x150>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d203      	bcs.n	8003cec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ce4:	4a2e      	ldr	r2, [pc, #184]	; (8003da0 <xTaskIncrementTick+0x15c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cea:	e02f      	b.n	8003d4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe ff79 	bl	8002be8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3318      	adds	r3, #24
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe ff70 	bl	8002be8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <xTaskIncrementTick+0x160>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d903      	bls.n	8003d1c <xTaskIncrementTick+0xd8>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <xTaskIncrementTick+0x160>)
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <xTaskIncrementTick+0x164>)
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f7fe fefb 	bl	8002b2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <xTaskIncrementTick+0x168>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3b8      	bcc.n	8003cb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d46:	2301      	movs	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d4a:	e7b5      	b.n	8003cb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d4c:	4b17      	ldr	r3, [pc, #92]	; (8003dac <xTaskIncrementTick+0x168>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	4915      	ldr	r1, [pc, #84]	; (8003da8 <xTaskIncrementTick+0x164>)
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d901      	bls.n	8003d68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <xTaskIncrementTick+0x16c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e004      	b.n	8003d80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <xTaskIncrementTick+0x170>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <xTaskIncrementTick+0x170>)
 8003d7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d80:	697b      	ldr	r3, [r7, #20]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000dd0 	.word	0x20000dd0
 8003d90:	20000dac 	.word	0x20000dac
 8003d94:	20000d60 	.word	0x20000d60
 8003d98:	20000d64 	.word	0x20000d64
 8003d9c:	20000dc0 	.word	0x20000dc0
 8003da0:	20000dc8 	.word	0x20000dc8
 8003da4:	20000db0 	.word	0x20000db0
 8003da8:	200008d8 	.word	0x200008d8
 8003dac:	200008d4 	.word	0x200008d4
 8003db0:	20000dbc 	.word	0x20000dbc
 8003db4:	20000db8 	.word	0x20000db8

08003db8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <vTaskSwitchContext+0xb0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <vTaskSwitchContext+0xb4>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dcc:	e046      	b.n	8003e5c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003dce:	4b27      	ldr	r3, [pc, #156]	; (8003e6c <vTaskSwitchContext+0xb4>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd4:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <vTaskSwitchContext+0xb8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e010      	b.n	8003dfe <vTaskSwitchContext+0x46>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	607b      	str	r3, [r7, #4]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <vTaskSwitchContext+0x3e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	491d      	ldr	r1, [pc, #116]	; (8003e74 <vTaskSwitchContext+0xbc>)
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0e4      	beq.n	8003ddc <vTaskSwitchContext+0x24>
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <vTaskSwitchContext+0xbc>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3308      	adds	r3, #8
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d104      	bne.n	8003e42 <vTaskSwitchContext+0x8a>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <vTaskSwitchContext+0xc0>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <vTaskSwitchContext+0xb8>)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <vTaskSwitchContext+0xc0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3354      	adds	r3, #84	; 0x54
 8003e58:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <vTaskSwitchContext+0xc4>)
 8003e5a:	6013      	str	r3, [r2, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	20000dd0 	.word	0x20000dd0
 8003e6c:	20000dbc 	.word	0x20000dbc
 8003e70:	20000db0 	.word	0x20000db0
 8003e74:	200008d8 	.word	0x200008d8
 8003e78:	200008d4 	.word	0x200008d4
 8003e7c:	20000010 	.word	0x20000010

08003e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60fb      	str	r3, [r7, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <vTaskPlaceOnEventList+0x44>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3318      	adds	r3, #24
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe fe61 	bl	8002b76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	6838      	ldr	r0, [r7, #0]
 8003eb8:	f000 fa80 	bl	80043bc <prvAddCurrentTaskToDelayedList>
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200008d4 	.word	0x200008d4

08003ec8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	617b      	str	r3, [r7, #20]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <vTaskPlaceOnEventListRestricted+0x54>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7fe fe18 	bl	8002b2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295
 8003f08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	68b8      	ldr	r0, [r7, #8]
 8003f0e:	f000 fa55 	bl	80043bc <prvAddCurrentTaskToDelayedList>
	}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200008d4 	.word	0x200008d4

08003f20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	60fb      	str	r3, [r7, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3318      	adds	r3, #24
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe fe49 	bl	8002be8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <xTaskRemoveFromEventList+0xb0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d11d      	bne.n	8003f9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fe40 	bl	8002be8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <xTaskRemoveFromEventList+0xb4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d903      	bls.n	8003f7c <xTaskRemoveFromEventList+0x5c>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <xTaskRemoveFromEventList+0xb4>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <xTaskRemoveFromEventList+0xb8>)
 8003f8a:	441a      	add	r2, r3
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f7fe fdcb 	bl	8002b2e <vListInsertEnd>
 8003f98:	e005      	b.n	8003fa6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	3318      	adds	r3, #24
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	480e      	ldr	r0, [pc, #56]	; (8003fdc <xTaskRemoveFromEventList+0xbc>)
 8003fa2:	f7fe fdc4 	bl	8002b2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <xTaskRemoveFromEventList+0xc0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d905      	bls.n	8003fc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <xTaskRemoveFromEventList+0xc4>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e001      	b.n	8003fc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fc4:	697b      	ldr	r3, [r7, #20]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000dd0 	.word	0x20000dd0
 8003fd4:	20000db0 	.word	0x20000db0
 8003fd8:	200008d8 	.word	0x200008d8
 8003fdc:	20000d68 	.word	0x20000d68
 8003fe0:	200008d4 	.word	0x200008d4
 8003fe4:	20000dbc 	.word	0x20000dbc

08003fe8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <vTaskInternalSetTimeOutState+0x24>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <vTaskInternalSetTimeOutState+0x28>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	605a      	str	r2, [r3, #4]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20000dc0 	.word	0x20000dc0
 8004010:	20000dac 	.word	0x20000dac

08004014 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	613b      	str	r3, [r7, #16]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004056:	f000 fe7d 	bl	8004d54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <xTaskCheckForTimeOut+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d102      	bne.n	800407a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e023      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <xTaskCheckForTimeOut+0xc0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d007      	beq.n	8004096 <xTaskCheckForTimeOut+0x82>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	429a      	cmp	r2, r3
 800408e:	d302      	bcc.n	8004096 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e015      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	d20b      	bcs.n	80040b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff9b 	bl	8003fe8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	e004      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040c2:	f000 fe77 	bl	8004db4 <vPortExitCritical>

	return xReturn;
 80040c6:	69fb      	ldr	r3, [r7, #28]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000dac 	.word	0x20000dac
 80040d4:	20000dc0 	.word	0x20000dc0

080040d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <vTaskMissedYield+0x14>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	20000dbc 	.word	0x20000dbc

080040f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040f8:	f000 f852 	bl	80041a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <prvIdleTask+0x28>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d9f9      	bls.n	80040f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <prvIdleTask+0x2c>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004114:	e7f0      	b.n	80040f8 <prvIdleTask+0x8>
 8004116:	bf00      	nop
 8004118:	200008d8 	.word	0x200008d8
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	e00c      	b.n	8004146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <prvInitialiseTaskLists+0x60>)
 8004138:	4413      	add	r3, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fcca 	bl	8002ad4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3301      	adds	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b37      	cmp	r3, #55	; 0x37
 800414a:	d9ef      	bls.n	800412c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800414c:	480d      	ldr	r0, [pc, #52]	; (8004184 <prvInitialiseTaskLists+0x64>)
 800414e:	f7fe fcc1 	bl	8002ad4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004152:	480d      	ldr	r0, [pc, #52]	; (8004188 <prvInitialiseTaskLists+0x68>)
 8004154:	f7fe fcbe 	bl	8002ad4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <prvInitialiseTaskLists+0x6c>)
 800415a:	f7fe fcbb 	bl	8002ad4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800415e:	480c      	ldr	r0, [pc, #48]	; (8004190 <prvInitialiseTaskLists+0x70>)
 8004160:	f7fe fcb8 	bl	8002ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004164:	480b      	ldr	r0, [pc, #44]	; (8004194 <prvInitialiseTaskLists+0x74>)
 8004166:	f7fe fcb5 	bl	8002ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <prvInitialiseTaskLists+0x78>)
 800416c:	4a05      	ldr	r2, [pc, #20]	; (8004184 <prvInitialiseTaskLists+0x64>)
 800416e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <prvInitialiseTaskLists+0x7c>)
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <prvInitialiseTaskLists+0x68>)
 8004174:	601a      	str	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200008d8 	.word	0x200008d8
 8004184:	20000d38 	.word	0x20000d38
 8004188:	20000d4c 	.word	0x20000d4c
 800418c:	20000d68 	.word	0x20000d68
 8004190:	20000d7c 	.word	0x20000d7c
 8004194:	20000d94 	.word	0x20000d94
 8004198:	20000d60 	.word	0x20000d60
 800419c:	20000d64 	.word	0x20000d64

080041a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a6:	e019      	b.n	80041dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041a8:	f000 fdd4 	bl	8004d54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <prvCheckTasksWaitingTermination+0x50>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fd15 	bl	8002be8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <prvCheckTasksWaitingTermination+0x54>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <prvCheckTasksWaitingTermination+0x54>)
 80041c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041d2:	f000 fdef 	bl	8004db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f810 	bl	80041fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e1      	bne.n	80041a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000d7c 	.word	0x20000d7c
 80041f4:	20000da8 	.word	0x20000da8
 80041f8:	20000d90 	.word	0x20000d90

080041fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3354      	adds	r3, #84	; 0x54
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f8f9 	bl	8005400 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004214:	2b00      	cmp	r3, #0
 8004216:	d108      	bne.n	800422a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	4618      	mov	r0, r3
 800421e:	f000 ff87 	bl	8005130 <vPortFree>
				vPortFree( pxTCB );
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 ff84 	bl	8005130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004228:	e018      	b.n	800425c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004230:	2b01      	cmp	r3, #1
 8004232:	d103      	bne.n	800423c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 ff7b 	bl	8005130 <vPortFree>
	}
 800423a:	e00f      	b.n	800425c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004242:	2b02      	cmp	r3, #2
 8004244:	d00a      	beq.n	800425c <prvDeleteTCB+0x60>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60fb      	str	r3, [r7, #12]
}
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <prvDeleteTCB+0x5e>
	}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <prvResetNextTaskUnblockTime+0x38>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800427c:	e008      	b.n	8004290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <prvResetNextTaskUnblockTime+0x38>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <prvResetNextTaskUnblockTime+0x3c>)
 800428e:	6013      	str	r3, [r2, #0]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	20000d60 	.word	0x20000d60
 80042a0:	20000dc8 	.word	0x20000dc8

080042a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <xTaskGetSchedulerState+0x34>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042b2:	2301      	movs	r3, #1
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	e008      	b.n	80042ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <xTaskGetSchedulerState+0x38>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042c0:	2302      	movs	r3, #2
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	e001      	b.n	80042ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042c6:	2300      	movs	r3, #0
 80042c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ca:	687b      	ldr	r3, [r7, #4]
	}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	20000db4 	.word	0x20000db4
 80042dc:	20000dd0 	.word	0x20000dd0

080042e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d056      	beq.n	80043a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042f6:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <xTaskPriorityDisinherit+0xd0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d00a      	beq.n	8004316 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	60bb      	str	r3, [r7, #8]
}
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	1e5a      	subs	r2, r3, #1
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	429a      	cmp	r2, r3
 8004348:	d02c      	beq.n	80043a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	2b00      	cmp	r3, #0
 8004350:	d128      	bne.n	80043a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3304      	adds	r3, #4
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe fc46 	bl	8002be8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <xTaskPriorityDisinherit+0xd4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d903      	bls.n	8004384 <xTaskPriorityDisinherit+0xa4>
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <xTaskPriorityDisinherit+0xd4>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <xTaskPriorityDisinherit+0xd8>)
 8004392:	441a      	add	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f7fe fbc7 	bl	8002b2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043a0:	2301      	movs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043a4:	697b      	ldr	r3, [r7, #20]
	}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200008d4 	.word	0x200008d4
 80043b4:	20000db0 	.word	0x20000db0
 80043b8:	200008d8 	.word	0x200008d8

080043bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043c6:	4b21      	ldr	r3, [pc, #132]	; (800444c <prvAddCurrentTaskToDelayedList+0x90>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043cc:	4b20      	ldr	r3, [pc, #128]	; (8004450 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe fc08 	bl	8002be8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d10a      	bne.n	80043f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e6:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <prvAddCurrentTaskToDelayedList+0x94>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4819      	ldr	r0, [pc, #100]	; (8004454 <prvAddCurrentTaskToDelayedList+0x98>)
 80043f0:	f7fe fb9d 	bl	8002b2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043f4:	e026      	b.n	8004444 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4413      	add	r3, r2
 80043fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043fe:	4b14      	ldr	r3, [pc, #80]	; (8004450 <prvAddCurrentTaskToDelayedList+0x94>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	429a      	cmp	r2, r3
 800440c:	d209      	bcs.n	8004422 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800440e:	4b12      	ldr	r3, [pc, #72]	; (8004458 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <prvAddCurrentTaskToDelayedList+0x94>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3304      	adds	r3, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7fe fbab 	bl	8002b76 <vListInsert>
}
 8004420:	e010      	b.n	8004444 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <prvAddCurrentTaskToDelayedList+0x94>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f7fe fba1 	bl	8002b76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d202      	bcs.n	8004444 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800443e:	4a08      	ldr	r2, [pc, #32]	; (8004460 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6013      	str	r3, [r2, #0]
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000dac 	.word	0x20000dac
 8004450:	200008d4 	.word	0x200008d4
 8004454:	20000d94 	.word	0x20000d94
 8004458:	20000d64 	.word	0x20000d64
 800445c:	20000d60 	.word	0x20000d60
 8004460:	20000dc8 	.word	0x20000dc8

08004464 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800446e:	f000 fb07 	bl	8004a80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <xTimerCreateTimerTask+0x80>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d021      	beq.n	80044be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004482:	1d3a      	adds	r2, r7, #4
 8004484:	f107 0108 	add.w	r1, r7, #8
 8004488:	f107 030c 	add.w	r3, r7, #12
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fb07 	bl	8002aa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	9202      	str	r2, [sp, #8]
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	2302      	movs	r3, #2
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	2300      	movs	r3, #0
 80044a2:	460a      	mov	r2, r1
 80044a4:	4910      	ldr	r1, [pc, #64]	; (80044e8 <xTimerCreateTimerTask+0x84>)
 80044a6:	4811      	ldr	r0, [pc, #68]	; (80044ec <xTimerCreateTimerTask+0x88>)
 80044a8:	f7ff f8b4 	bl	8003614 <xTaskCreateStatic>
 80044ac:	4603      	mov	r3, r0
 80044ae:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <xTimerCreateTimerTask+0x8c>)
 80044b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <xTimerCreateTimerTask+0x8c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044ba:	2301      	movs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	613b      	str	r3, [r7, #16]
}
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044da:	697b      	ldr	r3, [r7, #20]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000e04 	.word	0x20000e04
 80044e8:	0800559c 	.word	0x0800559c
 80044ec:	08004629 	.word	0x08004629
 80044f0:	20000e08 	.word	0x20000e08

080044f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xTimerGenericCommand+0x2e>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	623b      	str	r3, [r7, #32]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004522:	4b1a      	ldr	r3, [pc, #104]	; (800458c <xTimerGenericCommand+0x98>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d02a      	beq.n	8004580 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b05      	cmp	r3, #5
 800453a:	dc18      	bgt.n	800456e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800453c:	f7ff feb2 	bl	80042a4 <xTaskGetSchedulerState>
 8004540:	4603      	mov	r3, r0
 8004542:	2b02      	cmp	r3, #2
 8004544:	d109      	bne.n	800455a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <xTimerGenericCommand+0x98>)
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	f107 0110 	add.w	r1, r7, #16
 800454e:	2300      	movs	r3, #0
 8004550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004552:	f7fe fc77 	bl	8002e44 <xQueueGenericSend>
 8004556:	6278      	str	r0, [r7, #36]	; 0x24
 8004558:	e012      	b.n	8004580 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <xTimerGenericCommand+0x98>)
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	f107 0110 	add.w	r1, r7, #16
 8004562:	2300      	movs	r3, #0
 8004564:	2200      	movs	r2, #0
 8004566:	f7fe fc6d 	bl	8002e44 <xQueueGenericSend>
 800456a:	6278      	str	r0, [r7, #36]	; 0x24
 800456c:	e008      	b.n	8004580 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <xTimerGenericCommand+0x98>)
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f107 0110 	add.w	r1, r7, #16
 8004576:	2300      	movs	r3, #0
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	f7fe fd61 	bl	8003040 <xQueueGenericSendFromISR>
 800457e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004582:	4618      	mov	r0, r3
 8004584:	3728      	adds	r7, #40	; 0x28
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000e04 	.word	0x20000e04

08004590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af02      	add	r7, sp, #8
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459a:	4b22      	ldr	r3, [pc, #136]	; (8004624 <prvProcessExpiredTimer+0x94>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fb1d 	bl	8002be8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d022      	beq.n	8004602 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	699a      	ldr	r2, [r3, #24]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	18d1      	adds	r1, r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	6978      	ldr	r0, [r7, #20]
 80045ca:	f000 f8d1 	bl	8004770 <prvInsertTimerInActiveList>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01f      	beq.n	8004614 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	2100      	movs	r1, #0
 80045de:	6978      	ldr	r0, [r7, #20]
 80045e0:	f7ff ff88 	bl	80044f4 <xTimerGenericCommand>
 80045e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d113      	bne.n	8004614 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60fb      	str	r3, [r7, #12]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	b2da      	uxtb	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	4798      	blx	r3
}
 800461c:	bf00      	nop
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000dfc 	.word	0x20000dfc

08004628 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004630:	f107 0308 	add.w	r3, r7, #8
 8004634:	4618      	mov	r0, r3
 8004636:	f000 f857 	bl	80046e8 <prvGetNextExpireTime>
 800463a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4619      	mov	r1, r3
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f803 	bl	800464c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004646:	f000 f8d5 	bl	80047f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800464a:	e7f1      	b.n	8004630 <prvTimerTask+0x8>

0800464c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004656:	f7ff fa39 	bl	8003acc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f866 	bl	8004730 <prvSampleTimeNow>
 8004664:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d130      	bne.n	80046ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <prvProcessTimerOrBlockTask+0x3c>
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	429a      	cmp	r2, r3
 8004678:	d806      	bhi.n	8004688 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800467a:	f7ff fa35 	bl	8003ae8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff85 	bl	8004590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004686:	e024      	b.n	80046d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <prvProcessTimerOrBlockTask+0x90>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <prvProcessTimerOrBlockTask+0x50>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <prvProcessTimerOrBlockTask+0x52>
 800469c:	2300      	movs	r3, #0
 800469e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <prvProcessTimerOrBlockTask+0x94>)
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	4619      	mov	r1, r3
 80046ae:	f7fe ff7d 	bl	80035ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046b2:	f7ff fa19 	bl	8003ae8 <xTaskResumeAll>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <prvProcessTimerOrBlockTask+0x98>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	f3bf 8f6f 	isb	sy
}
 80046cc:	e001      	b.n	80046d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046ce:	f7ff fa0b 	bl	8003ae8 <xTaskResumeAll>
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000e00 	.word	0x20000e00
 80046e0:	20000e04 	.word	0x20000e04
 80046e4:	e000ed04 	.word	0xe000ed04

080046e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <prvGetNextExpireTime+0x44>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <prvGetNextExpireTime+0x16>
 80046fa:	2201      	movs	r2, #1
 80046fc:	e000      	b.n	8004700 <prvGetNextExpireTime+0x18>
 80046fe:	2200      	movs	r2, #0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <prvGetNextExpireTime+0x44>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e001      	b.n	800471c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800471c:	68fb      	ldr	r3, [r7, #12]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000dfc 	.word	0x20000dfc

08004730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004738:	f7ff fa74 	bl	8003c24 <xTaskGetTickCount>
 800473c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <prvSampleTimeNow+0x3c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	429a      	cmp	r2, r3
 8004746:	d205      	bcs.n	8004754 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004748:	f000 f936 	bl	80049b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e002      	b.n	800475a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800475a:	4a04      	ldr	r2, [pc, #16]	; (800476c <prvSampleTimeNow+0x3c>)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000e0c 	.word	0x20000e0c

08004770 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d812      	bhi.n	80047bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	1ad2      	subs	r2, r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d302      	bcc.n	80047aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e01b      	b.n	80047e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <prvInsertTimerInActiveList+0x7c>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fe f9de 	bl	8002b76 <vListInsert>
 80047ba:	e012      	b.n	80047e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d206      	bcs.n	80047d2 <prvInsertTimerInActiveList+0x62>
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d302      	bcc.n	80047d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e007      	b.n	80047e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047d2:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <prvInsertTimerInActiveList+0x80>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe f9ca 	bl	8002b76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047e2:	697b      	ldr	r3, [r7, #20]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000e00 	.word	0x20000e00
 80047f0:	20000dfc 	.word	0x20000dfc

080047f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	; 0x38
 80047f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047fa:	e0ca      	b.n	8004992 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da18      	bge.n	8004834 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004802:	1d3b      	adds	r3, r7, #4
 8004804:	3304      	adds	r3, #4
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	61fb      	str	r3, [r7, #28]
}
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482a:	6850      	ldr	r0, [r2, #4]
 800482c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482e:	6892      	ldr	r2, [r2, #8]
 8004830:	4611      	mov	r1, r2
 8004832:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f2c0 80aa 	blt.w	8004990 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	3304      	adds	r3, #4
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe f9cb 	bl	8002be8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004852:	463b      	mov	r3, r7
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff6b 	bl	8004730 <prvSampleTimeNow>
 800485a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b09      	cmp	r3, #9
 8004860:	f200 8097 	bhi.w	8004992 <prvProcessReceivedCommands+0x19e>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <prvProcessReceivedCommands+0x78>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	08004895 	.word	0x08004895
 8004870:	08004895 	.word	0x08004895
 8004874:	08004895 	.word	0x08004895
 8004878:	08004909 	.word	0x08004909
 800487c:	0800491d 	.word	0x0800491d
 8004880:	08004967 	.word	0x08004967
 8004884:	08004895 	.word	0x08004895
 8004888:	08004895 	.word	0x08004895
 800488c:	08004909 	.word	0x08004909
 8004890:	0800491d 	.word	0x0800491d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	18d1      	adds	r1, r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b4:	f7ff ff5c 	bl	8004770 <prvInsertTimerInActiveList>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d069      	beq.n	8004992 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d05e      	beq.n	8004992 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	441a      	add	r2, r3
 80048dc:	2300      	movs	r3, #0
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2300      	movs	r3, #0
 80048e2:	2100      	movs	r1, #0
 80048e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e6:	f7ff fe05 	bl	80044f4 <xTimerGenericCommand>
 80048ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d14f      	bne.n	8004992 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	61bb      	str	r3, [r7, #24]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	b2da      	uxtb	r2, r3
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800491a:	e03a      	b.n	8004992 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	617b      	str	r3, [r7, #20]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	18d1      	adds	r1, r2, r3
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004960:	f7ff ff06 	bl	8004770 <prvInsertTimerInActiveList>
					break;
 8004964:	e015      	b.n	8004992 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d103      	bne.n	800497c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004976:	f000 fbdb 	bl	8005130 <vPortFree>
 800497a:	e00a      	b.n	8004992 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	b2da      	uxtb	r2, r3
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800498e:	e000      	b.n	8004992 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004990:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <prvProcessReceivedCommands+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1d39      	adds	r1, r7, #4
 8004998:	2200      	movs	r2, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fbec 	bl	8003178 <xQueueReceive>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f47f af2a 	bne.w	80047fc <prvProcessReceivedCommands+0x8>
	}
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3730      	adds	r7, #48	; 0x30
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000e04 	.word	0x20000e04

080049b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049be:	e048      	b.n	8004a52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049c0:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <prvSwitchTimerLists+0xc0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ca:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <prvSwitchTimerLists+0xc0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe f905 	bl	8002be8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02e      	beq.n	8004a52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d90e      	bls.n	8004a24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a12:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <prvSwitchTimerLists+0xc0>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7fe f8aa 	bl	8002b76 <vListInsert>
 8004a22:	e016      	b.n	8004a52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a24:	2300      	movs	r3, #0
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fd60 	bl	80044f4 <xTimerGenericCommand>
 8004a34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	603b      	str	r3, [r7, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <prvSwitchTimerLists+0xc0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1b1      	bne.n	80049c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <prvSwitchTimerLists+0xc0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <prvSwitchTimerLists+0xc4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <prvSwitchTimerLists+0xc0>)
 8004a68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a6a:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <prvSwitchTimerLists+0xc4>)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6013      	str	r3, [r2, #0]
}
 8004a70:	bf00      	nop
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20000dfc 	.word	0x20000dfc
 8004a7c:	20000e00 	.word	0x20000e00

08004a80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a86:	f000 f965 	bl	8004d54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <prvCheckForValidListAndQueue+0x60>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d120      	bne.n	8004ad4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a92:	4814      	ldr	r0, [pc, #80]	; (8004ae4 <prvCheckForValidListAndQueue+0x64>)
 8004a94:	f7fe f81e 	bl	8002ad4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a98:	4813      	ldr	r0, [pc, #76]	; (8004ae8 <prvCheckForValidListAndQueue+0x68>)
 8004a9a:	f7fe f81b 	bl	8002ad4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <prvCheckForValidListAndQueue+0x6c>)
 8004aa0:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <prvCheckForValidListAndQueue+0x64>)
 8004aa2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004aa4:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <prvCheckForValidListAndQueue+0x70>)
 8004aa6:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <prvCheckForValidListAndQueue+0x68>)
 8004aa8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <prvCheckForValidListAndQueue+0x74>)
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <prvCheckForValidListAndQueue+0x78>)
 8004ab2:	2110      	movs	r1, #16
 8004ab4:	200a      	movs	r0, #10
 8004ab6:	f7fe f929 	bl	8002d0c <xQueueGenericCreateStatic>
 8004aba:	4603      	mov	r3, r0
 8004abc:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <prvCheckForValidListAndQueue+0x60>)
 8004abe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <prvCheckForValidListAndQueue+0x60>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <prvCheckForValidListAndQueue+0x60>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	490b      	ldr	r1, [pc, #44]	; (8004afc <prvCheckForValidListAndQueue+0x7c>)
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fd42 	bl	8003558 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ad4:	f000 f96e 	bl	8004db4 <vPortExitCritical>
}
 8004ad8:	bf00      	nop
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000e04 	.word	0x20000e04
 8004ae4:	20000dd4 	.word	0x20000dd4
 8004ae8:	20000de8 	.word	0x20000de8
 8004aec:	20000dfc 	.word	0x20000dfc
 8004af0:	20000e00 	.word	0x20000e00
 8004af4:	20000eb0 	.word	0x20000eb0
 8004af8:	20000e10 	.word	0x20000e10
 8004afc:	080055a4 	.word	0x080055a4

08004b00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b04      	subs	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b30:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <pxPortInitialiseStack+0x64>)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b14      	subs	r3, #20
 8004b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f06f 0202 	mvn.w	r2, #2
 8004b4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3b20      	subs	r3, #32
 8004b54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	08004b69 	.word	0x08004b69

08004b68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <prvTaskExitError+0x54>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d00a      	beq.n	8004b92 <prvTaskExitError+0x2a>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	60fb      	str	r3, [r7, #12]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <prvTaskExitError+0x28>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60bb      	str	r3, [r7, #8]
}
 8004ba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ba6:	bf00      	nop
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0fc      	beq.n	8004ba8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <pxCurrentTCBConst2>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	f380 8809 	msr	PSP, r0
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	4770      	bx	lr
 8004bdc:	f3af 8000 	nop.w

08004be0 <pxCurrentTCBConst2>:
 8004be0:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004be8:	4808      	ldr	r0, [pc, #32]	; (8004c0c <prvPortStartFirstTask+0x24>)
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f380 8808 	msr	MSP, r0
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8814 	msr	CONTROL, r0
 8004bfa:	b662      	cpsie	i
 8004bfc:	b661      	cpsie	f
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	df00      	svc	0
 8004c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c0a:	bf00      	nop
 8004c0c:	e000ed08 	.word	0xe000ed08

08004c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c16:	4b46      	ldr	r3, [pc, #280]	; (8004d30 <xPortStartScheduler+0x120>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a46      	ldr	r2, [pc, #280]	; (8004d34 <xPortStartScheduler+0x124>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10a      	bne.n	8004c36 <xPortStartScheduler+0x26>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c36:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <xPortStartScheduler+0x120>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3f      	ldr	r2, [pc, #252]	; (8004d38 <xPortStartScheduler+0x128>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10a      	bne.n	8004c56 <xPortStartScheduler+0x46>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	60fb      	str	r3, [r7, #12]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c56:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <xPortStartScheduler+0x12c>)
 8004c58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	22ff      	movs	r2, #255	; 0xff
 8004c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <xPortStartScheduler+0x130>)
 8004c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <xPortStartScheduler+0x134>)
 8004c80:	2207      	movs	r2, #7
 8004c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c84:	e009      	b.n	8004c9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c86:	4b2f      	ldr	r3, [pc, #188]	; (8004d44 <xPortStartScheduler+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <xPortStartScheduler+0x134>)
 8004c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d0ef      	beq.n	8004c86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ca6:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <xPortStartScheduler+0x134>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f1c3 0307 	rsb	r3, r3, #7
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d00a      	beq.n	8004cc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	60bb      	str	r3, [r7, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <xPortStartScheduler+0x134>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <xPortStartScheduler+0x134>)
 8004cd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <xPortStartScheduler+0x134>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cda:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <xPortStartScheduler+0x134>)
 8004cdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ce6:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <xPortStartScheduler+0x138>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <xPortStartScheduler+0x138>)
 8004cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <xPortStartScheduler+0x138>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <xPortStartScheduler+0x138>)
 8004cf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cfe:	f000 f8dd 	bl	8004ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <xPortStartScheduler+0x13c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d08:	f000 f8fc 	bl	8004f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d0c:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <xPortStartScheduler+0x140>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0f      	ldr	r2, [pc, #60]	; (8004d50 <xPortStartScheduler+0x140>)
 8004d12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d18:	f7ff ff66 	bl	8004be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d1c:	f7ff f84c 	bl	8003db8 <vTaskSwitchContext>
	prvTaskExitError();
 8004d20:	f7ff ff22 	bl	8004b68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	e000ed00 	.word	0xe000ed00
 8004d34:	410fc271 	.word	0x410fc271
 8004d38:	410fc270 	.word	0x410fc270
 8004d3c:	e000e400 	.word	0xe000e400
 8004d40:	20000f00 	.word	0x20000f00
 8004d44:	20000f04 	.word	0x20000f04
 8004d48:	e000ed20 	.word	0xe000ed20
 8004d4c:	2000000c 	.word	0x2000000c
 8004d50:	e000ef34 	.word	0xe000ef34

08004d54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	607b      	str	r3, [r7, #4]
}
 8004d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <vPortEnterCritical+0x58>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <vPortEnterCritical+0x58>)
 8004d76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <vPortEnterCritical+0x58>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10f      	bne.n	8004da0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vPortEnterCritical+0x5c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	603b      	str	r3, [r7, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <vPortEnterCritical+0x4a>
	}
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <vPortExitCritical+0x50>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <vPortExitCritical+0x24>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	607b      	str	r3, [r7, #4]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <vPortExitCritical+0x50>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <vPortExitCritical+0x50>)
 8004de0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004de2:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <vPortExitCritical+0x50>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d105      	bne.n	8004df6 <vPortExitCritical+0x42>
 8004dea:	2300      	movs	r3, #0
 8004dec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f383 8811 	msr	BASEPRI, r3
}
 8004df4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c
	...

08004e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e10:	f3ef 8009 	mrs	r0, PSP
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <pxCurrentTCBConst>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	f01e 0f10 	tst.w	lr, #16
 8004e20:	bf08      	it	eq
 8004e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e34:	f380 8811 	msr	BASEPRI, r0
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f7fe ffba 	bl	8003db8 <vTaskSwitchContext>
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f380 8811 	msr	BASEPRI, r0
 8004e4c:	bc09      	pop	{r0, r3}
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	6808      	ldr	r0, [r1, #0]
 8004e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e56:	f01e 0f10 	tst.w	lr, #16
 8004e5a:	bf08      	it	eq
 8004e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e60:	f380 8809 	msr	PSP, r0
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w

08004e70 <pxCurrentTCBConst>:
 8004e70:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop

08004e78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	607b      	str	r3, [r7, #4]
}
 8004e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e92:	f7fe fed7 	bl	8003c44 <xTaskIncrementTick>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <xPortSysTickHandler+0x40>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
}
 8004eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <vPortSetupTimerInterrupt+0x38>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <vPortSetupTimerInterrupt+0x3c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <vPortSetupTimerInterrupt+0x40>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <vPortSetupTimerInterrupt+0x44>)
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010
 8004ef4:	e000e018 	.word	0xe000e018
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	10624dd3 	.word	0x10624dd3
 8004f00:	e000e014 	.word	0xe000e014

08004f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f14 <vPortEnableVFP+0x10>
 8004f08:	6801      	ldr	r1, [r0, #0]
 8004f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f0e:	6001      	str	r1, [r0, #0]
 8004f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f12:	bf00      	nop
 8004f14:	e000ed88 	.word	0xe000ed88

08004f18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f1e:	f3ef 8305 	mrs	r3, IPSR
 8004f22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	d914      	bls.n	8004f54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <vPortValidateInterruptPriority+0x70>)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f34:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <vPortValidateInterruptPriority+0x74>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	7afa      	ldrb	r2, [r7, #11]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d20a      	bcs.n	8004f54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <vPortValidateInterruptPriority+0x78>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <vPortValidateInterruptPriority+0x7c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d90a      	bls.n	8004f7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	603b      	str	r3, [r7, #0]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <vPortValidateInterruptPriority+0x60>
	}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	e000e3f0 	.word	0xe000e3f0
 8004f8c:	20000f00 	.word	0x20000f00
 8004f90:	e000ed0c 	.word	0xe000ed0c
 8004f94:	20000f04 	.word	0x20000f04

08004f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fa4:	f7fe fd92 	bl	8003acc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fa8:	4b5b      	ldr	r3, [pc, #364]	; (8005118 <pvPortMalloc+0x180>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fb0:	f000 f920 	bl	80051f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fb4:	4b59      	ldr	r3, [pc, #356]	; (800511c <pvPortMalloc+0x184>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 8093 	bne.w	80050e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01d      	beq.n	8005004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fc8:	2208      	movs	r2, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d014      	beq.n	8005004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f023 0307 	bic.w	r3, r3, #7
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <pvPortMalloc+0x6c>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	617b      	str	r3, [r7, #20]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d06e      	beq.n	80050e8 <pvPortMalloc+0x150>
 800500a:	4b45      	ldr	r3, [pc, #276]	; (8005120 <pvPortMalloc+0x188>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d869      	bhi.n	80050e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005014:	4b43      	ldr	r3, [pc, #268]	; (8005124 <pvPortMalloc+0x18c>)
 8005016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005018:	4b42      	ldr	r3, [pc, #264]	; (8005124 <pvPortMalloc+0x18c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800501e:	e004      	b.n	800502a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d903      	bls.n	800503c <pvPortMalloc+0xa4>
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f1      	bne.n	8005020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800503c:	4b36      	ldr	r3, [pc, #216]	; (8005118 <pvPortMalloc+0x180>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005042:	429a      	cmp	r2, r3
 8005044:	d050      	beq.n	80050e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2208      	movs	r2, #8
 800504c:	4413      	add	r3, r2
 800504e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	2308      	movs	r3, #8
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	429a      	cmp	r2, r3
 8005066:	d91f      	bls.n	80050a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <pvPortMalloc+0xf8>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	613b      	str	r3, [r7, #16]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050a2:	69b8      	ldr	r0, [r7, #24]
 80050a4:	f000 f908 	bl	80052b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <pvPortMalloc+0x188>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <pvPortMalloc+0x188>)
 80050b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <pvPortMalloc+0x188>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <pvPortMalloc+0x190>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d203      	bcs.n	80050ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050c2:	4b17      	ldr	r3, [pc, #92]	; (8005120 <pvPortMalloc+0x188>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <pvPortMalloc+0x190>)
 80050c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <pvPortMalloc+0x184>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <pvPortMalloc+0x194>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	4a11      	ldr	r2, [pc, #68]	; (800512c <pvPortMalloc+0x194>)
 80050e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050e8:	f7fe fcfe 	bl	8003ae8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <pvPortMalloc+0x174>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60fb      	str	r3, [r7, #12]
}
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <pvPortMalloc+0x172>
	return pvReturn;
 800510c:	69fb      	ldr	r3, [r7, #28]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20001ac8 	.word	0x20001ac8
 800511c:	20001adc 	.word	0x20001adc
 8005120:	20001acc 	.word	0x20001acc
 8005124:	20001ac0 	.word	0x20001ac0
 8005128:	20001ad0 	.word	0x20001ad0
 800512c:	20001ad4 	.word	0x20001ad4

08005130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04d      	beq.n	80051de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005142:	2308      	movs	r3, #8
 8005144:	425b      	negs	r3, r3
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <vPortFree+0xb8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4013      	ands	r3, r2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <vPortFree+0x44>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	60fb      	str	r3, [r7, #12]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <vPortFree+0x62>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	60bb      	str	r3, [r7, #8]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <vPortFree+0xb8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01e      	beq.n	80051de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11a      	bne.n	80051de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <vPortFree+0xb8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	401a      	ands	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051b8:	f7fe fc88 	bl	8003acc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <vPortFree+0xbc>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <vPortFree+0xbc>)
 80051c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051ca:	6938      	ldr	r0, [r7, #16]
 80051cc:	f000 f874 	bl	80052b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051d0:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <vPortFree+0xc0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	4a06      	ldr	r2, [pc, #24]	; (80051f0 <vPortFree+0xc0>)
 80051d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051da:	f7fe fc85 	bl	8003ae8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051de:	bf00      	nop
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20001adc 	.word	0x20001adc
 80051ec:	20001acc 	.word	0x20001acc
 80051f0:	20001ad8 	.word	0x20001ad8

080051f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80051fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005200:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <prvHeapInit+0xac>)
 8005202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3307      	adds	r3, #7
 8005212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <prvHeapInit+0xac>)
 8005224:	4413      	add	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <prvHeapInit+0xb0>)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005232:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <prvHeapInit+0xb0>)
 8005234:	2200      	movs	r2, #0
 8005236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005240:	2208      	movs	r2, #8
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0307 	bic.w	r3, r3, #7
 800524e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <prvHeapInit+0xb4>)
 8005254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005256:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <prvHeapInit+0xb4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <prvHeapInit+0xb4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <prvHeapInit+0xb4>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <prvHeapInit+0xb8>)
 8005282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <prvHeapInit+0xbc>)
 800528a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <prvHeapInit+0xc0>)
 800528e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	20000f08 	.word	0x20000f08
 80052a4:	20001ac0 	.word	0x20001ac0
 80052a8:	20001ac8 	.word	0x20001ac8
 80052ac:	20001ad0 	.word	0x20001ad0
 80052b0:	20001acc 	.word	0x20001acc
 80052b4:	20001adc 	.word	0x20001adc

080052b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <prvInsertBlockIntoFreeList+0xac>)
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e002      	b.n	80052cc <prvInsertBlockIntoFreeList+0x14>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d8f7      	bhi.n	80052c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4413      	add	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d108      	bne.n	80052fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	441a      	add	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d118      	bne.n	8005340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <prvInsertBlockIntoFreeList+0xb0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d00d      	beq.n	8005336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	441a      	add	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e008      	b.n	8005348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <prvInsertBlockIntoFreeList+0xb0>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e003      	b.n	8005348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	429a      	cmp	r2, r3
 800534e:	d002      	beq.n	8005356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20001ac0 	.word	0x20001ac0
 8005368:	20001ac8 	.word	0x20001ac8

0800536c <__libc_init_array>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4d0d      	ldr	r5, [pc, #52]	; (80053a4 <__libc_init_array+0x38>)
 8005370:	4c0d      	ldr	r4, [pc, #52]	; (80053a8 <__libc_init_array+0x3c>)
 8005372:	1b64      	subs	r4, r4, r5
 8005374:	10a4      	asrs	r4, r4, #2
 8005376:	2600      	movs	r6, #0
 8005378:	42a6      	cmp	r6, r4
 800537a:	d109      	bne.n	8005390 <__libc_init_array+0x24>
 800537c:	4d0b      	ldr	r5, [pc, #44]	; (80053ac <__libc_init_array+0x40>)
 800537e:	4c0c      	ldr	r4, [pc, #48]	; (80053b0 <__libc_init_array+0x44>)
 8005380:	f000 f8f2 	bl	8005568 <_init>
 8005384:	1b64      	subs	r4, r4, r5
 8005386:	10a4      	asrs	r4, r4, #2
 8005388:	2600      	movs	r6, #0
 800538a:	42a6      	cmp	r6, r4
 800538c:	d105      	bne.n	800539a <__libc_init_array+0x2e>
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	f855 3b04 	ldr.w	r3, [r5], #4
 8005394:	4798      	blx	r3
 8005396:	3601      	adds	r6, #1
 8005398:	e7ee      	b.n	8005378 <__libc_init_array+0xc>
 800539a:	f855 3b04 	ldr.w	r3, [r5], #4
 800539e:	4798      	blx	r3
 80053a0:	3601      	adds	r6, #1
 80053a2:	e7f2      	b.n	800538a <__libc_init_array+0x1e>
 80053a4:	080056b8 	.word	0x080056b8
 80053a8:	080056b8 	.word	0x080056b8
 80053ac:	080056b8 	.word	0x080056b8
 80053b0:	080056bc 	.word	0x080056bc

080053b4 <__retarget_lock_acquire_recursive>:
 80053b4:	4770      	bx	lr

080053b6 <__retarget_lock_release_recursive>:
 80053b6:	4770      	bx	lr

080053b8 <memcpy>:
 80053b8:	440a      	add	r2, r1
 80053ba:	4291      	cmp	r1, r2
 80053bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80053c0:	d100      	bne.n	80053c4 <memcpy+0xc>
 80053c2:	4770      	bx	lr
 80053c4:	b510      	push	{r4, lr}
 80053c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ce:	4291      	cmp	r1, r2
 80053d0:	d1f9      	bne.n	80053c6 <memcpy+0xe>
 80053d2:	bd10      	pop	{r4, pc}

080053d4 <memset>:
 80053d4:	4402      	add	r2, r0
 80053d6:	4603      	mov	r3, r0
 80053d8:	4293      	cmp	r3, r2
 80053da:	d100      	bne.n	80053de <memset+0xa>
 80053dc:	4770      	bx	lr
 80053de:	f803 1b01 	strb.w	r1, [r3], #1
 80053e2:	e7f9      	b.n	80053d8 <memset+0x4>

080053e4 <cleanup_glue>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	460c      	mov	r4, r1
 80053e8:	6809      	ldr	r1, [r1, #0]
 80053ea:	4605      	mov	r5, r0
 80053ec:	b109      	cbz	r1, 80053f2 <cleanup_glue+0xe>
 80053ee:	f7ff fff9 	bl	80053e4 <cleanup_glue>
 80053f2:	4621      	mov	r1, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053fa:	f000 b869 	b.w	80054d0 <_free_r>
	...

08005400 <_reclaim_reent>:
 8005400:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <_reclaim_reent+0xb4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4283      	cmp	r3, r0
 8005406:	b570      	push	{r4, r5, r6, lr}
 8005408:	4604      	mov	r4, r0
 800540a:	d051      	beq.n	80054b0 <_reclaim_reent+0xb0>
 800540c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800540e:	b143      	cbz	r3, 8005422 <_reclaim_reent+0x22>
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d14a      	bne.n	80054ac <_reclaim_reent+0xac>
 8005416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	b111      	cbz	r1, 8005422 <_reclaim_reent+0x22>
 800541c:	4620      	mov	r0, r4
 800541e:	f000 f857 	bl	80054d0 <_free_r>
 8005422:	6961      	ldr	r1, [r4, #20]
 8005424:	b111      	cbz	r1, 800542c <_reclaim_reent+0x2c>
 8005426:	4620      	mov	r0, r4
 8005428:	f000 f852 	bl	80054d0 <_free_r>
 800542c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800542e:	b111      	cbz	r1, 8005436 <_reclaim_reent+0x36>
 8005430:	4620      	mov	r0, r4
 8005432:	f000 f84d 	bl	80054d0 <_free_r>
 8005436:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005438:	b111      	cbz	r1, 8005440 <_reclaim_reent+0x40>
 800543a:	4620      	mov	r0, r4
 800543c:	f000 f848 	bl	80054d0 <_free_r>
 8005440:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005442:	b111      	cbz	r1, 800544a <_reclaim_reent+0x4a>
 8005444:	4620      	mov	r0, r4
 8005446:	f000 f843 	bl	80054d0 <_free_r>
 800544a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800544c:	b111      	cbz	r1, 8005454 <_reclaim_reent+0x54>
 800544e:	4620      	mov	r0, r4
 8005450:	f000 f83e 	bl	80054d0 <_free_r>
 8005454:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005456:	b111      	cbz	r1, 800545e <_reclaim_reent+0x5e>
 8005458:	4620      	mov	r0, r4
 800545a:	f000 f839 	bl	80054d0 <_free_r>
 800545e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005460:	b111      	cbz	r1, 8005468 <_reclaim_reent+0x68>
 8005462:	4620      	mov	r0, r4
 8005464:	f000 f834 	bl	80054d0 <_free_r>
 8005468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800546a:	b111      	cbz	r1, 8005472 <_reclaim_reent+0x72>
 800546c:	4620      	mov	r0, r4
 800546e:	f000 f82f 	bl	80054d0 <_free_r>
 8005472:	69a3      	ldr	r3, [r4, #24]
 8005474:	b1e3      	cbz	r3, 80054b0 <_reclaim_reent+0xb0>
 8005476:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005478:	4620      	mov	r0, r4
 800547a:	4798      	blx	r3
 800547c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800547e:	b1b9      	cbz	r1, 80054b0 <_reclaim_reent+0xb0>
 8005480:	4620      	mov	r0, r4
 8005482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005486:	f7ff bfad 	b.w	80053e4 <cleanup_glue>
 800548a:	5949      	ldr	r1, [r1, r5]
 800548c:	b941      	cbnz	r1, 80054a0 <_reclaim_reent+0xa0>
 800548e:	3504      	adds	r5, #4
 8005490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005492:	2d80      	cmp	r5, #128	; 0x80
 8005494:	68d9      	ldr	r1, [r3, #12]
 8005496:	d1f8      	bne.n	800548a <_reclaim_reent+0x8a>
 8005498:	4620      	mov	r0, r4
 800549a:	f000 f819 	bl	80054d0 <_free_r>
 800549e:	e7ba      	b.n	8005416 <_reclaim_reent+0x16>
 80054a0:	680e      	ldr	r6, [r1, #0]
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 f814 	bl	80054d0 <_free_r>
 80054a8:	4631      	mov	r1, r6
 80054aa:	e7ef      	b.n	800548c <_reclaim_reent+0x8c>
 80054ac:	2500      	movs	r5, #0
 80054ae:	e7ef      	b.n	8005490 <_reclaim_reent+0x90>
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
 80054b2:	bf00      	nop
 80054b4:	20000010 	.word	0x20000010

080054b8 <__malloc_lock>:
 80054b8:	4801      	ldr	r0, [pc, #4]	; (80054c0 <__malloc_lock+0x8>)
 80054ba:	f7ff bf7b 	b.w	80053b4 <__retarget_lock_acquire_recursive>
 80054be:	bf00      	nop
 80054c0:	20001ae0 	.word	0x20001ae0

080054c4 <__malloc_unlock>:
 80054c4:	4801      	ldr	r0, [pc, #4]	; (80054cc <__malloc_unlock+0x8>)
 80054c6:	f7ff bf76 	b.w	80053b6 <__retarget_lock_release_recursive>
 80054ca:	bf00      	nop
 80054cc:	20001ae0 	.word	0x20001ae0

080054d0 <_free_r>:
 80054d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054d2:	2900      	cmp	r1, #0
 80054d4:	d044      	beq.n	8005560 <_free_r+0x90>
 80054d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054da:	9001      	str	r0, [sp, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f1a1 0404 	sub.w	r4, r1, #4
 80054e2:	bfb8      	it	lt
 80054e4:	18e4      	addlt	r4, r4, r3
 80054e6:	f7ff ffe7 	bl	80054b8 <__malloc_lock>
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <_free_r+0x94>)
 80054ec:	9801      	ldr	r0, [sp, #4]
 80054ee:	6813      	ldr	r3, [r2, #0]
 80054f0:	b933      	cbnz	r3, 8005500 <_free_r+0x30>
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	6014      	str	r4, [r2, #0]
 80054f6:	b003      	add	sp, #12
 80054f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054fc:	f7ff bfe2 	b.w	80054c4 <__malloc_unlock>
 8005500:	42a3      	cmp	r3, r4
 8005502:	d908      	bls.n	8005516 <_free_r+0x46>
 8005504:	6825      	ldr	r5, [r4, #0]
 8005506:	1961      	adds	r1, r4, r5
 8005508:	428b      	cmp	r3, r1
 800550a:	bf01      	itttt	eq
 800550c:	6819      	ldreq	r1, [r3, #0]
 800550e:	685b      	ldreq	r3, [r3, #4]
 8005510:	1949      	addeq	r1, r1, r5
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	e7ed      	b.n	80054f2 <_free_r+0x22>
 8005516:	461a      	mov	r2, r3
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b10b      	cbz	r3, 8005520 <_free_r+0x50>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d9fa      	bls.n	8005516 <_free_r+0x46>
 8005520:	6811      	ldr	r1, [r2, #0]
 8005522:	1855      	adds	r5, r2, r1
 8005524:	42a5      	cmp	r5, r4
 8005526:	d10b      	bne.n	8005540 <_free_r+0x70>
 8005528:	6824      	ldr	r4, [r4, #0]
 800552a:	4421      	add	r1, r4
 800552c:	1854      	adds	r4, r2, r1
 800552e:	42a3      	cmp	r3, r4
 8005530:	6011      	str	r1, [r2, #0]
 8005532:	d1e0      	bne.n	80054f6 <_free_r+0x26>
 8005534:	681c      	ldr	r4, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	6053      	str	r3, [r2, #4]
 800553a:	4421      	add	r1, r4
 800553c:	6011      	str	r1, [r2, #0]
 800553e:	e7da      	b.n	80054f6 <_free_r+0x26>
 8005540:	d902      	bls.n	8005548 <_free_r+0x78>
 8005542:	230c      	movs	r3, #12
 8005544:	6003      	str	r3, [r0, #0]
 8005546:	e7d6      	b.n	80054f6 <_free_r+0x26>
 8005548:	6825      	ldr	r5, [r4, #0]
 800554a:	1961      	adds	r1, r4, r5
 800554c:	428b      	cmp	r3, r1
 800554e:	bf04      	itt	eq
 8005550:	6819      	ldreq	r1, [r3, #0]
 8005552:	685b      	ldreq	r3, [r3, #4]
 8005554:	6063      	str	r3, [r4, #4]
 8005556:	bf04      	itt	eq
 8005558:	1949      	addeq	r1, r1, r5
 800555a:	6021      	streq	r1, [r4, #0]
 800555c:	6054      	str	r4, [r2, #4]
 800555e:	e7ca      	b.n	80054f6 <_free_r+0x26>
 8005560:	b003      	add	sp, #12
 8005562:	bd30      	pop	{r4, r5, pc}
 8005564:	20001ae4 	.word	0x20001ae4

08005568 <_init>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr

08005574 <_fini>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr
